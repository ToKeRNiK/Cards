import os
import json
import random
import logging
import psycopg2
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from psycopg2.extras import RealDictCursor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8295319122:AAFGvZ1GFqPv8EkCTQnXjSKzd4dOG8rz1bg')
COOLDOWN_MINUTES = 5

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.environ.get('DATABASE_URL', 'postgresql://postgres:GjvKELSoRVzbyXCnxEMBdWvOTiCvufbs@postgres.railway.internal:5432/railway')

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–û–ë–´–¢–ò–ô ====================
# –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ EVENTS_CONFIG –∏ EVENT_CARDS
# –ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CURRENT_EVENT –≤ –∫–ª—é—á —Å–æ–±—ã—Ç–∏—è

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
EVENTS_CONFIG = {
    "–ö–∞–∑–∞–Ω—å2025": {
        "name": "–ö–∞–∑–∞–Ω—å2025",
        "key": "–ö–∞–∑–∞–Ω—å",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        "active": False,  # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
        "start_date": "2025-10-27",
        "end_date": "2025-10-29", 
        "emoji": "üèôÔ∏è",
        "chance": 8
    },
    "–•—ç–ª–ª–æ—É–∏–Ω2025": {
        "name": "–•—ç–ª–ª–æ—É–∏–Ω2025", 
        "key": "–•—ç–ª–ª–æ—É–∏–Ω",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        "active": True,  # –í–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        "start_date": "2025-10-29",
        "end_date": "2025-10-31",
        "emoji": "üéÉ",
        "chance": 8
    },
    "–ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã2025": {
        "name": "–ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã2025", 
        "key": "–ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        "active": True,  # –í–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        "start_date": "2025-11-01",
        "end_date": "2025-11-30",
        "emoji": "‚òÑÔ∏è",
        "chance": 8
    }
}

# –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (–∏–∑–º–µ–Ω–∏—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–±—ã—Ç–∏–µ)
CURRENT_EVENT = "–ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã2025"
EVENT_CONFIG = EVENTS_CONFIG[CURRENT_EVENT]

# ==================== –û–°–ù–û–í–ù–´–ï –ö–ê–†–¢–û–ß–ö–ò ====================
RARITY_GROUPS = {
    "–†–µ–¥–∫–∞—è": {
        "base_chance": 30.1,
        "adjusted_chance": 27.692,
        "emoji": "üü¢",
        "cards": [
            {"id": 2.1, "name": "–î–≤–∞ –∑–∞–¥—Ä–æ—Ç–∞", "image": "cards/Rare/card2.1.jpg", "points": 50},
            {"id": 2.2, "name": "–£–º–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ –æ—á–∫–∞—Ö —Å–∫–∞—á–∞—Ç—å –æ–±–æ–∏", "image": "cards/Rare/card2.2.jpg", "points": 50},
            {"id": 2.3, "name": "–ö–æ—Å—Ç—è –í–æ–¥–æ–ª–∞–∑", "image": "cards/Rare/card2.3.jpg", "points": 50},
            {"id": 2.4, "name": "–ú–∏—Ö–∞–∏–ª –î–∏–Ω–æ–∑–∞–≤—Ä", "image": "cards/Rare/card2.4.jpg", "points": 50},
            {"id": 2.5, "name": "–ú–∏—Ö–∞–∏–ª –ú–µ–≤–¥–µ–¥", "image": "cards/Rare/card2.5.jpg", "points": 50},
            {"id": 2.6, "name": "–ë—É—Ä–≥–µ—Ä –ö–∏–Ω–≥", "image": "cards/Rare/card2.6.jpg", "points": 50},
            {"id": 2.7, "name": "–°–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "image": "cards/Rare/card2.7.jpg", "points": 50},
            {"id": 2.8, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä –æ–ø—è—Ç—å –Ω—é—Ö–∞–µ—Ç", "image": "cards/Rare/card2.8.jpg", "points": 50},
            {"id": 2.9, "name": "–ö–æ—Å—Ç—è", "image": "cards/Rare/card2.9.jpg", "points": 50},
        ]
    },
    "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è": {
        "base_chance": 23.8,
        "adjusted_chance": 21.896,
        "emoji": "üîµ",
        "cards": [
            {"id": 3, "name": "–Ø—Ä–∏–∫", "image": "cards/SuperRare/card3.jpg", "points": 200},
            {"id": 3.1, "name": "–£–í–ó", "image": "cards/SuperRare/card3.1.jpg", "points": 200},
            {"id": 3.2, "name": "–ß–∏–∂–∏–∫", "image": "cards/SuperRare/card3.2.jpg", "points": 200},
            {"id": 3.3, "name": "–§–∏–∫—Å –≤ –ü—Ä–∞–π–º–µ", "image": "cards/SuperRare/card3.3.jpg", "points": 200},
            {"id": 3.4, "name": "–ö–ª—É–±–Ω–∏—á–Ω–∞—è –∫—Ä–µ–º–∫–∞", "image": "cards/SuperRare/card3.4.jpg", "points": 200},
            {"id": 3.5, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä —É –∑–µ—Ä–∫–∞–ª–∞", "image": "cards/SuperRare/card3.5.jpg", "points": 200},
            {"id": 3.6, "name": "–ú–æ–ª–æ—á–Ω–∞—è –∫—Ä–µ–º–∫–∞", "image": "cards/SuperRare/card3.6.jpg", "points": 200},
            {"id": 3.7, "name": "–°–≤–∏–Ω—å—è", "image": "cards/SuperRare/card3.7.jpg", "points": 200},
        ]
    },
    "–≠–ø–∏—á–µ—Å–∫–∞—è": {
        "base_chance": 17.6,
        "adjusted_chance": 16.192,
        "emoji": "üü£",
        "cards": [
            {"id": 4, "name": "–ú–∏—Ö–∞–∏–ª –î–∏–Ω–æ–∑–∞–≤—Ä", "image": "cards/Epic/card4.jpg", "points": 1000},
            {"id": 4.1, "name": "–°—Ç—ë–ø–∞ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç", "image": "cards/Epic/card4.1.jpg", "points": 1000},
            {"id": 4.2, "name": "–ö–∏–º–º–∏—Ö mentality", "image": "cards/Epic/card4.2.jpg", "points": 1000},
            {"id": 4.3, "name": "–í–µ—Å—ë–ª—ã–π –ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥—å", "image": "cards/Epic/card4.3.jpg", "points": 1000},
            {"id": 4.4, "name": "–ì—Ä—É—Å—Ç–Ω—ã–π –¢–∏–º–æ—Ñ–µ–π", "image": "cards/Epic/card4.4.jpg", "points": 1000},
            {"id": 4.5, "name": "–í—ë—Å–µ–ª—ã–π –¢–∏–º–æ—Ñ–µ–π", "image": "cards/Epic/card4.5.jpg", "points": 1000},
            {"id": 4.6, "name": "–ú–∏—Ä–æ—Å–ª–∞–≤ –∏ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ –∫–∞–±–∞–Ω—ã", "image": "cards/Epic/card4.6.jpg", "points": 1000},
            {"id": 4.7, "name": "–ö—Ä–µ–º–∫–∞ —Å –º–æ—Ä—Å–∫–æ–π —Å–æ–ª—å—é", "image": "cards/Epic/card4.7.jpg", "points": 1000},
            {"id": 4.8, "name": "–í–∫—É—Å–Ω–æ –∏ —Ç–æ—á–∫–∞", "image": "cards/Epic/card4.8.jpg", "points": 1000},
            {"id": 4.9, "name": "–®–∞–ø–æ—á–∫–∞ –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è", "image": "cards/Epic/card4.9.jpg", "points": 1000},
        ]
    },
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": {
        "base_chance": 15.6,
        "adjusted_chance": 14.352,
        "emoji": "üî¥",
        "cards": [
            {"id": 5, "name": "–°–∏–≥–º–∞ –ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥—å", "image": "cards/Mythic/card5.jpg", "points": 5000},
            {"id": 5.1, "name": "–ì—Ä–∏—à–∞ –®–∞–ª—É–Ω", "image": "cards/Mythic/card5.1.jpg", "points": 5000},
            {"id": 5.2, "name": "–ï–í–†–ê–ó", "image": "cards/Mythic/card5.2.jpg", "points": 5000},
            {"id": 5.3, "name": "–°—á–∞—Å—Ç–ª–∏–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä", "image": "cards/Mythic/card5.3.jpg", "points": 5000},
            {"id": 5.4, "name": "–ú–∏—Ö–∞–∏–ª –ß–∏–∫–∞—Ç–∏–ª–æ", "image": "cards/Mythic/card5.4.jpg", "points": 5000},
            {"id": 5.5, "name": "–ú–∏—à–∞ Combination 2", "image": "cards/Mythic/card5.5.jpg", "points": 5000},
            {"id": 5.6, "name": "–í–∞–Ω—è –ú–∞–∫–∞–∫–∞", "image": "cards/Mythic/card5.6.jpg", "points": 5000},
            {"id": 5.7, "name": "–ú–∏—Ä–æ—Å–ª–∞–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–º", "image": "cards/Mythic/card5.7.jpg", "points": 5000},
            {"id": 5.8, "name": "–ö–æ—Ñ–µ–π–Ω–∞—è –∫—Ä–µ–º–∫–∞", "image": "cards/Mythic/card5.8.jpg", "points": 5000},
            {"id": 5.9, "name": "–ú–∏—à–∞ –ú–µ–¥–≤–µ–¥—å –Ω–∞ –û–ë–ñ", "image": "cards/Mythic/card5.9.jpg", "points": 5000},
        ]
    },
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": {
        "base_chance": 10.4,
        "adjusted_chance": 9.568,
        "emoji": "üü°",
        "cards": [
            {"id": 6, "name": "–°—Ç—ë–ø–∞ —Å —Ñ–∞–Ω–∞—Ç–∞–º–∏", "image": "cards/Legendary/card6.jpg", "points": 10000},
            {"id": 6.1, "name": "–¢–∏–º–æ—Ñ–µ–π –∏ –í–∞–Ω—è", "image": "cards/Legendary/card6.1.jpg", "points": 10000},
            {"id": 6.2, "name": "–ú–∏—Ö–∞–∏–ª –ú–µ–≤–¥–µ–¥—å –ø–æ—Å–ª–µ —Å–æ—Ä–µ–≤", "image": "cards/Legendary/card6.2.jpg", "points": 10000},
            {"id": 6.3, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å —Ü–≤–µ—Ç–æ—á–∫–æ–º", "image": "cards/Legendary/card6.3.jpg", "points": 10000},
            {"id": 6.4, "name": "–ë—É–ª—å–±–∞ –ú–µ–Ω", "image": "cards/Legendary/card6.4.jpg", "points": 10000},
            {"id": 6.5, "name": "–ö–∞–∑–∞–Ω—Å–∫–∏–π –¢–∞—Ä–∞–∫–∞–Ω", "image": "cards/Legendary/card6.5.jpg", "points": 10000},
            {"id": 6.6, "name": "–ú–∏—à–∞ Combination", "image": "cards/Legendary/card6.6.jpg", "points": 10000},
            {"id": 6.7, "name": "–ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥ –Ω–∞ —Å–æ—Ä–µ–≤–∞—Ö", "image": "cards/Legendary/card6.7.jpg", "points": 10000},
            {"id": 6.8, "name": "–ú–∞—Ä–∫ –•–∞–π–∑–µ–Ω–±–µ—Ä–≥", "image": "cards/Legendary/card6.8.jpg", "points": 10000},
            {"id": 6.9, "name": "–°–∏–≥–º–∞ –∏ 27", "image": "cards/Legendary/card6.9.jpg", "points": 10000},
            {"id": 6.11, "name": "–†–∏–∫ –ì—Ä–∞–π–º—Å", "image": "cards/Legendary/card6.10.jpg", "points": 10000},
            {"id": 6.12, "name": "–†–∏–∫ –ì—Ä–∞–π–º—Å", "image": "cards/Legendary/card6.11.jpg", "points": 10000},
        ]
    },
    "–°–µ–∫—Ä–µ—Ç–Ω–∞—è": {
        "base_chance": 2,
        "adjusted_chance": 1.84,
        "emoji": "‚ö´Ô∏è",
        "cards": [
            {"id": 7, "name": "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?", "image": "cards/Secret/card7.jpg", "points": 20000},
            {"id": 7.1, "name": "–î–µ—Ä–∂–∞—Ç–µ–ª—å —è–∏—Ü –Ø—Ä–∏–∫", "image": "cards/Secret/card7.1.jpg", "points": 20000},
            {"id": 7.2, "name": "–ö–µ—Ñ–∞—Å", "image": "cards/Secret/card7.2.jpg", "points": 20000},
            {"id": 7.3, "name": "–í–ª–∞–¥–µ–ª–µ—Ü –ö–µ—Ñ–∞—Å–∞", "image": "cards/Secret/card7.3.jpg", "points": 20000},
            {"id": 7.4, "name": "–°—Ç—ë–ø–∞ –∂—É—ë—Ç —à–∞–ø–æ—á–∫—É", "image": "cards/Secret/card7.4.jpg", "points": 20000},
            {"id": 7.5, "name": "–í–ª–∞–¥–µ–ª–µ—Ü –ë—É—Ä–≥–µ—Ä –ö–∏–Ω–≥–∞", "image": "cards/Secret/card7.5.jpg", "points": 20000},
            {"id": 7.6, "name": "–ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥—å –∫—É–ø–∏–ª –ù–∏–≥–µ—Ä–∏—é", "image": "cards/Secret/card7.6.jpg", "points": 20000},
            {"id": 7.7, "name": "twenty-seven", "image": "cards/Secret/card7.7.jpg", "points": 20000},
            {"id": 7.8, "name": "–ú–∞—Ä–∫ –≤ —Ä–æ–∑–æ–≤–æ–π –º–∞—à–∏–Ω–µ", "image": "cards/Secret/card7.8.jpg", "points": 20000},
        ]
    },
    "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è": {
        "base_chance": 0.5,
        "adjusted_chance": 0.46,
        "emoji": "üü†",
        "cards": [
            {"id": 8, "name": "–ú–∏—à–∏ –≤ –ø–æ–µ–∑–¥–µ", "image": "cards/Exclusive/card8.jpg", "points": 50000},
            {"id": 8.1, "name": "–ú–∏—à–∏ –≤ –¢—É–∞–ø—Å–µ", "image": "cards/Exclusive/card8.1.jpg", "points": 50000},
            {"id": 8.2, "name": "–ú–µ—Å—Ç–æ —Å–ø–∞–≤–Ω–∞ –≥–∞–¥–æ—Å—Ç–µ–π", "image": "cards/Exclusive/card8.2.jpg", "points": 50000},
            {"id": 8.3, "name": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–π", "image": "cards/Exclusive/card8.3.jpg", "points": 50000},
        ]
    },
}

# ==================== –ö–ê–†–¢–û–ß–ö–ò –°–û–ë–´–¢–ò–ô ====================
EVENT_CARDS = {
    "–ö–∞–∑–∞–Ω—å": {
        "chance": EVENTS_CONFIG["–ö–∞–∑–∞–Ω—å2025"]["chance"],
        "emoji": EVENTS_CONFIG["–ö–∞–∑–∞–Ω—å2025"]["emoji"],
        "cards": [
            {"id": 9.1, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä –≤ –ö–∞–∑–∞–Ω–∏", "image": "cards/Kazan/card9.1.jpg", "points": 25000},
            {"id": 9.2, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä –≤ –∫–∞–∑–∞–Ω—Å–∫–æ–º —Å–∞–º–æ–ª—ë—Ç–µ", "image": "cards/Kazan/card9.2.jpg", "points": 25000},
            {"id": 9.3, "name": "–ú–∏—à–∞ –ú–µ–≤–¥–µ–¥—å —Å –∫–∞–∑–∞–Ω—Å–∫–∏–º –º–µ–¥–≤–µ–¥–µ–º", "image": "cards/Kazan/card9.3.jpg", "points": 25000},
            {"id": 9.4, "name": "–ú–∏—Ö–∞–∏–ª –î–∏–Ω–æ–∑–∞–≤—Ä –≤ –ö–∞–∑–∞–Ω–∏", "image": "cards/Kazan/card9.4.jpg", "points": 25000},
            {"id": 9.5, "name": "–ú–∏–Ω–∏ –õ–∏—Ç–≤–∏–Ω –≤ –ö–∞–∑–∞–Ω–∏", "image": "cards/Kazan/card9.5.jpg", "points": 25000},
            {"id": 9.6, "name": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —á–µ—Ç–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –ö–∞–∑–∞–Ω—å—é", "image": "cards/Kazan/card9.6.jpg", "points": 25000},
            {"id": 9.7, "name": "'–í–∏–¥–∏—à—å –≤–æ–Ω —Ç–∞–º –≤–æ–Ω –¥—Ä–æ–Ω—ã –ª–µ—Ç—è—Ç'", "image": "cards/Kazan/card9.7.jpg", "points": 25000},
            {"id": 9.8, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∏–¥", "image": "cards/Kazan/card9.8.jpg", "points": 25000},
        ]
    },
    "–•—ç–ª–ª–æ—É–∏–Ω": {
        "chance": EVENTS_CONFIG["–•—ç–ª–ª–æ—É–∏–Ω2025"]["chance"],
        "emoji": EVENTS_CONFIG["–•—ç–ª–ª–æ—É–∏–Ω2025"]["emoji"],
        "cards": [
            {"id": 10.1, "name": "–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–π –ú–∏—à–∞ –ú–µ–¥–≤–µ–¥—å", "image": "cards/Halloween/card10.1.jpg", "points": 30000},
            {"id": 10.2, "name": "–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–π –Ø—Ä–∏–∫", "image": "cards/Halloween/card10.2.jpg", "points": 30000},
            {"id": 10.3, "name": "–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–π –ú–∏—à–∞ –î–∏–Ω–æ–∑–∞–≤—Ä", "image": "cards/Halloween/card10.3.jpg", "points": 30000},
            {"id": 10.4, "name": "–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–π –û–ø–µ—Ä–∞—Ç–æ—Ä", "image": "cards/Halloween/card10.4.jpg", "points": 30000},
            {"id": 10.5, "name": "–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–π –ú–∏–Ω–∏ –õ–∏—Ç–≤–∏–Ω", "image": "cards/Halloween/card10.5.jpg", "points": 30000},
        ]
    },
    "–ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã": {
        "chance": EVENTS_CONFIG["–ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã2025"]["chance"],
        "emoji": EVENTS_CONFIG["–ó–≤–µ–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã2025"]["emoji"],
        "cards": [
            {"id": 11.1, "name": "–Ø—Ä–∏–∫ –ú–µ–π—Å –í–∏–Ω–¥—É", "image": "cards/StarWars/card11.1.jpg", "points": 35000},
            {"id": 11.2, "name": "–ú–∞—Ä–∫ –î–∞—Ä—Ç –í–µ–π–¥–µ—Ä", "image": "cards/StarWars/card11.2.jpg", "points": 35000},
            {"id": 11.3, "name": "–ì—Ä–∏—à–∞ –ô–æ–¥–∞", "image": "cards/StarWars/card11.3.jpg", "points": 35000},
            {"id": 11.4, "name": "–ú–∏—à–∞ –î–∏–Ω–æ–∑–∞–≤—Ä –†–µ–π –°–∫–∞–π—É–æ–∫–µ—Ä", "image": "cards/StarWars/card11.4.jpg", "points": 35000},
            {"id": 11.5, "name": "–ú–∏—à–∞ –ú–µ–¥–≤–µ–¥—å –û–±–∏-–í–∞–Ω –ö–µ–Ω–æ–±–∏", "image": "cards/StarWars/card11.5.jpg", "points": 35000},
            {"id": 11.6, "name": "–ú–∏–Ω–∏ –õ–∏—Ç–≤–∏–Ω –ê—Å–æ–∫–∞ –¢–∞–Ω–æ", "image": "cards/StarWars/card11.6.jpg", "points": 35000},
            {"id": 11.7, "name": "–ö–æ—Å—Ç—è –î–∞—Ä—Ç –ú–æ–ª", "image": "cards/StarWars/card11.7.jpg", "points": 35000},
            {"id": 11.8, "name": "–°—Ç—ë–ø–∞ –ü–æ–¥–∫–µ—Ñ–∞—Å–Ω—ã–π", "image": "cards/StarWars/card11.8.jpg", "points": 35000},
        ]
    },
}

# ==================== –ü–†–û–ú–û–ö–û–î–´ ====================
PROMOCODES = {
    "secret23gifting": {
        "type": "random_rarity",
        "rarity": "–°–µ–∫—Ä–µ—Ç–Ω–∞—è",
        "uses_left": 1,
        "max_uses": 1,
        "description": "–°–ª—É—á–∞–π–Ω–∞—è —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"
    },
    "legendary24gifting": {
        "type": "random_rarity", 
        "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
        "uses_left": 1,
        "max_uses": 1,
        "description": "–°–ª—É—á–∞–π–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞"
    },
    "yarikgivt2025": {
        "type": "specific_card",
        "card_id": 7.1,
        "uses_left": 1,
        "max_uses": 1,
        "description": "–î–µ—Ä–∂–∞—Ç–µ–ª—å —è–∏—Ü –Ø—Ä–∏–∫"
    },
    "rickgrimespeakedit2025": {
        "type": "specific_card",
        "card_id": 6.11,
        "uses_left": 2,
        "max_uses": 2,
        "description": "–†–∏–∫ –ì—Ä–∞–π–º—Å"
    },
    "kotoriyhour2025": {
        "type": "specific_card",
        "card_id": 7,
        "uses_left": 5,
        "max_uses": 5,
        "description": "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?"
    },
    "halakefasiche4327": {
        "type": "specific_card",
        "card_id": 7.2,
        "uses_left": 3,
        "max_uses": 3,
        "description": "–ö–µ—Ñ–∞—Å"
    },
    "stem27onixfree": {
        "type": "specific_card", 
        "card_id": 7.7,
        "uses_left": 5,
        "max_uses": 5,
        "description": "twenty-seven"
    },
    "kazanrandom2025": {
        "type": "random_event",
        "event": "–ö–∞–∑–∞–Ω—å",
        "uses_left": 10,
        "max_uses": 10,
        "description": "–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è –ö–∞–∑–∞–Ω—å"
    },
    "halloweenrandom2025": {
        "type": "random_event",
        "event": "–•—ç–ª–ª–æ—É–∏–Ω",
        "uses_left": 10,
        "max_uses": 10,
        "description": "–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è –•—ç–ª–ª–æ—É–∏–Ω"
    },
}

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
def get_db_connection():
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    return conn

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id TEXT PRIMARY KEY,
            inventory JSONB,
            total_points INTEGER DEFAULT 0,
            last_used TIMESTAMP WITH TIME ZONE,
            used_promocodes JSONB
        )
    ''')
    
    cur.execute('''
        CREATE TABLE IF NOT EXISTS promocodes (
            code TEXT PRIMARY KEY,
            type TEXT NOT NULL,
            rarity TEXT,
            card_id REAL,
            event_name TEXT,
            uses_left INTEGER,
            max_uses INTEGER,
            description TEXT
        )
    ''')
    
    cur.execute('''
        CREATE TABLE IF NOT EXISTS used_promocodes (
            user_id TEXT,
            promo_code TEXT,
            used_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            PRIMARY KEY (user_id, promo_code)
        )
    ''')
    
    for code, data in PROMOCODES.items():
        cur.execute('''
            INSERT INTO promocodes (code, type, rarity, card_id, event_name, uses_left, max_uses, description)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (code) DO UPDATE SET
                uses_left = EXCLUDED.uses_left
        ''', (
            code,
            data["type"],
            data.get("rarity"),
            data.get("card_id"),
            data.get("event"),
            data["uses_left"],
            data["max_uses"],
            data["description"]
        ))
    
    conn.commit()
    cur.close()
    conn.close()

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()
    
    user_data = {}
    for user in users:
        user_data[user['user_id']] = {
            "inventory": user['inventory'] or [],
            "total_points": user['total_points'] or 0,
            "last_used": user['last_used'].isoformat() if user['last_used'] else None,
            "used_promocodes": user['used_promocodes'] or []
        }
    
    cur.close()
    conn.close()
    return user_data

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    for user_id, user_info in data.items():
        cur.execute('''
            INSERT INTO users (user_id, inventory, total_points, last_used, used_promocodes)
            VALUES (%s, %s, %s, %s, %s)
            ON CONFLICT (user_id) DO UPDATE SET
                inventory = EXCLUDED.inventory,
                total_points = EXCLUDED.total_points,
                last_used = EXCLUDED.last_used,
                used_promocodes = EXCLUDED.used_promocodes
        ''', (
            user_id,
            json.dumps(user_info["inventory"]),
            user_info["total_points"],
            user_info["last_used"],
            json.dumps(user_info.get("used_promocodes", []))
        ))
    
    conn.commit()
    cur.close()
    conn.close()

def load_promo_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute('SELECT * FROM promocodes')
    promos = cur.fetchall()
    
    promo_data = {}
    for promo in promos:
        promo_data[promo['code']] = {
            "type": promo['type'],
            "rarity": promo['rarity'],
            "card_id": promo['card_id'],
            "event": promo['event_name'],
            "uses_left": promo['uses_left'],
            "max_uses": promo['max_uses'],
            "description": promo['description']
        }
    
    cur.close()
    conn.close()
    return promo_data

def save_promo_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    for code, promo_info in data.items():
        cur.execute('''
            INSERT INTO promocodes (code, type, rarity, card_id, event_name, uses_left, max_uses, description)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (code) DO UPDATE SET
                uses_left = EXCLUDED.uses_left
        ''', (
            code,
            promo_info["type"],
            promo_info.get("rarity"),
            promo_info.get("card_id"),
            promo_info.get("event"),
            promo_info["uses_left"],
            promo_info["max_uses"],
            promo_info["description"]
        ))
    
    conn.commit()
    cur.close()
    conn.close()

def has_user_used_promo(user_id, promo_code):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–æ–∫–æ–¥"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('SELECT 1 FROM used_promocodes WHERE user_id = %s AND promo_code = %s', (user_id, promo_code))
    result = cur.fetchone()
    
    cur.close()
    conn.close()
    return result is not None

def mark_promo_used(user_id, promo_code):
    """–ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''
        INSERT INTO used_promocodes (user_id, promo_code)
        VALUES (%s, %s)
        ON CONFLICT (user_id, promo_code) DO NOTHING
    ''', (user_id, promo_code))
    
    conn.commit()
    cur.close()
    conn.close()

# ==================== –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô ====================
def is_event_active():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    if not EVENT_CONFIG["active"]:
        return False
    
    try:
        now = datetime.now(timezone.utc)
        start_date = datetime.fromisoformat(EVENT_CONFIG["start_date"]).replace(tzinfo=timezone.utc)
        end_date = datetime.fromisoformat(EVENT_CONFIG["end_date"]).replace(tzinfo=timezone.utc)
        
        return start_date <= now <= end_date
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        return False

def get_current_event_key():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    return EVENT_CONFIG["key"]

def get_available_rarities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    available_rarities = {}
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
    for rarity, data in RARITY_GROUPS.items():
        if is_event_active():
            available_rarities[rarity] = {
                "chance": data["adjusted_chance"],
                "emoji": data["emoji"],
                "cards": data["cards"]
            }
        else:
            available_rarities[rarity] = {
                "chance": data["base_chance"],
                "emoji": data["emoji"],
                "cards": data["cards"]
            }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    if is_event_active():
        event_key = get_current_event_key()
        if event_key in EVENT_CARDS:
            available_rarities[event_key] = EVENT_CARDS[event_key]
    
    return available_rarities

def get_random_card():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    available_rarities = get_available_rarities()
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–ø–∞–¥–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    if is_event_active():
        event_chance = EVENT_CONFIG["chance"]
        if random.random() * 100 < event_chance:
            # –í—ã–ø–∞–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
            event_key = get_current_event_key()
            if event_key in EVENT_CARDS:
                event_cards = EVENT_CARDS[event_key]["cards"]
                card = random.choice(event_cards)
                card["rarity"] = event_key
                card["emoji"] = EVENT_CARDS[event_key]["emoji"]
                card["rarity_chance"] = EVENT_CARDS[event_key]["chance"]
                return card
    
    # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ –Ω–µ –≤—ã–ø–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π–Ω–∞—è –∫–∞—Ä—Ç–∞, –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π
    roll = random.random() * 100
    current = 0
    
    selected_rarity = None
    for rarity, data in available_rarities.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–π–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
        if is_event_active() and rarity == get_current_event_key():
            continue
        current += data["chance"]
        if roll <= current:
            selected_rarity = rarity
            break
    
    if selected_rarity is None:
        available_without_event = {k: v for k, v in available_rarities.items() 
                                 if not (is_event_active() and k == get_current_event_key())}
        selected_rarity = list(available_without_event.keys())[0]
    
    cards_in_rarity = available_rarities[selected_rarity]["cards"]
    card = random.choice(cards_in_rarity)
    
    card["rarity"] = selected_rarity
    card["emoji"] = available_rarities[selected_rarity]["emoji"]
    card["rarity_chance"] = available_rarities[selected_rarity]["chance"]
    
    return card

def get_card_by_id(card_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID"""
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    for rarity_group in RARITY_GROUPS.values():
        for card in rarity_group["cards"]:
            if card["id"] == card_id:
                card["rarity"] = next(r for r, rg in RARITY_GROUPS.items() if card in rg["cards"])
                card["emoji"] = RARITY_GROUPS[card["rarity"]]["emoji"]
                return card
    
    # –ó–∞—Ç–µ–º –∏—â–µ–º –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö —Å–æ–±—ã—Ç–∏—è
    for event_key, event_data in EVENT_CARDS.items():
        for card in event_data["cards"]:
            if card["id"] == card_id:
                card["rarity"] = event_key
                card["emoji"] = event_data["emoji"]
                return card
    
    return None

def get_random_card_by_rarity(target_rarity):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    available_rarities = get_available_rarities()
    
    if target_rarity not in available_rarities:
        return None
    
    cards_in_rarity = available_rarities[target_rarity]["cards"]
    card = random.choice(cards_in_rarity)
    
    card["rarity"] = target_rarity
    card["emoji"] = available_rarities[target_rarity]["emoji"]
    card["rarity_chance"] = available_rarities[target_rarity]["chance"]
    
    return card

def get_random_event_card(event_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è"""
    if event_name not in EVENT_CARDS:
        return None
    
    cards_in_event = EVENT_CARDS[event_name]["cards"]
    card = random.choice(cards_in_event)
    
    card["rarity"] = event_name
    card["emoji"] = EVENT_CARDS[event_name]["emoji"]
    card["rarity_chance"] = EVENT_CARDS[event_name]["chance"]
    
    return card

def add_card_to_user(user_id, card):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_data = load_user_data()
    
    if user_id not in user_data:
        user_data[user_id] = {"inventory": [], "total_points": 0, "last_used": None, "used_promocodes": []}
    
    user_data[user_id]["inventory"].append({
        "card_id": card["id"],
        "name": card["name"],
        "rarity": card["rarity"],
        "points": card["points"],
        "acquired": datetime.now(timezone.utc).isoformat(),
        "from_promo": True
    })
    
    user_data[user_id]["total_points"] += card["points"]
    save_user_data(user_data)
    
    logger.info(f"User {user_id} received card from promo: {card['name']}")

def get_user_card_stats(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = load_user_data()
    if user_id not in user_data:
        return {}
    
    inventory = user_data[user_id]["inventory"]
    card_stats = {}
    
    for card in inventory:
        card_id = card["card_id"]
        if card_id not in card_stats:
            original_card = get_card_by_id(card_id)
            if original_card:
                card_stats[card_id] = {
                    "name": original_card["name"],
                    "image": original_card["image"],
                    "rarity": original_card["rarity"],
                    "points": original_card["points"],
                    "emoji": original_card["emoji"],
                    "count": 1,
                    "total_points": original_card["points"]
                }
        else:
            card_stats[card_id]["count"] += 1
            card_stats[card_id]["total_points"] += card["points"]
    
    return card_stats

# ==================== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    available_rarities = get_available_rarities()
    
    rarity_info = "üé≤ **–®–∞–Ω—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–µ–π:**\n"
    for rarity, data in available_rarities.items():
        emoji = data["emoji"]
        chance = data["chance"]
        card_count = len(data["cards"])
        rarity_info += f"{emoji} {rarity}: {chance}% ({card_count} –∫–∞—Ä—Ç–æ—á–µ–∫)\n"
    
    event_info = ""
    if is_event_active():
        event_key = get_current_event_key()
        event_cards_count = len(EVENT_CARDS[event_key]["cards"]) if event_key in EVENT_CARDS else 0
        event_info = f"\nüéâ **–ê–ö–¢–ò–í–ù–û–ï –°–û–ë–´–¢–ò–ï: {EVENT_CONFIG['name']} {EVENT_CONFIG['emoji']}**\n"
        event_info += f"üìÖ –î–æ: {EVENT_CONFIG['end_date']}\n"
        event_info += f"üé¥ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {event_cards_count} —à—Ç.\n\n"
    
    await update.message.reply_text(
        f"üé¥ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫!**\n\n"
        f"{event_info}"
        "üìñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/getcard - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "/inventory - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
        "/rarities - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–¥–∫–æ—Å—Ç—è—Ö\n"
        "/promo <–∫–æ–¥> - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "/event - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏\n\n"
        f"‚è∞ **–ö—É–ª–¥–∞—É–Ω:** {COOLDOWN_MINUTES} –º–∏–Ω—É—Ç\n\n"
        f"{rarity_info}",
        parse_mode='Markdown'
    )

async def show_event_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_event_active():
        event_key = get_current_event_key()
        event_cards_info = "üé¥ **–ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è:**\n"
        if event_key in EVENT_CARDS:
            for card in EVENT_CARDS[event_key]["cards"]:
                event_cards_info += f"‚Ä¢ {card['name']} ({card['points']} –æ—á–∫–æ–≤)\n"
        
        await update.message.reply_text(
            f"üéâ **–°–û–ë–´–¢–ò–ï: {EVENT_CONFIG['name']} {EVENT_CONFIG['emoji']}**\n\n"
            f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {EVENT_CONFIG['start_date']} - {EVENT_CONFIG['end_date']}\n"
            f"üé≤ **–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è:** {EVENT_CONFIG['chance']}%\n"
            f"‚≠ê **–û—Å–æ–±—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:** {len(EVENT_CARDS[event_key]['cards'])} —à—Ç.\n\n"
            f"{event_cards_info}\n"
            f"‚ö° **–£—Å–ø–µ–π –ø–æ–ª—É—á–∏—Ç—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è!**",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
            parse_mode='Markdown'
        )

async def show_rarities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    available_rarities = get_available_rarities()
    
    rarity_info = "üé≤ **–®–∞–Ω—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–µ–π:**\n"
    for rarity, data in available_rarities.items():
        emoji = data["emoji"]
        chance = data["chance"]
        card_count = len(data["cards"])
        rarity_info += f"{emoji} {rarity}: {chance}% ({card_count} –∫–∞—Ä—Ç–æ—á–µ–∫)\n"
    
    if is_event_active():
        rarity_info += f"\nüéâ **–°–æ–±—ã—Ç–∏–µ {EVENT_CONFIG['name']} –∞–∫—Ç–∏–≤–Ω–æ –¥–æ {EVENT_CONFIG['end_date']}**"
    
    await update.message.reply_text(rarity_info, parse_mode='Markdown')

async def get_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = load_user_data()

    last_used = user_data.get(user_id, {}).get('last_used')
    if last_used:
        if last_used.endswith('Z'):
            last_time = datetime.fromisoformat(last_used.replace('Z', '+00:00'))
        else:
            last_time = datetime.fromisoformat(last_used)
        
        current_time = datetime.now(timezone.utc)
        
        if last_time.tzinfo is None:
            last_time = last_time.replace(tzinfo=timezone.utc)
        
        time_passed = current_time - last_time
        cooldown_duration = timedelta(minutes=COOLDOWN_MINUTES)
        
        if time_passed < cooldown_duration:
            remaining_time = cooldown_duration - time_passed
            total_seconds = int(remaining_time.total_seconds())
            
            hours = total_seconds // 3600
            minutes = (total_seconds % 3600) // 60
            seconds = total_seconds % 60
            
            if hours > 0:
                time_message = f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
            elif minutes > 0:
                time_message = f"{minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
            else:
                time_message = f"{seconds} —Å–µ–∫—É–Ω–¥"
                
            await update.message.reply_text(
                f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {time_message}"
            )
            return

    card = get_random_card()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–±—ã—Ç–∏—è
    event_notice = ""
    if is_event_active() and card["rarity"] == get_current_event_key():
        event_notice = f"\nüéâ **–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–ê–Ø –ö–ê–†–¢–û–ß–ö–ê –°–û–ë–´–¢–ò–Ø {EVENT_CONFIG['name']}!**"
    
    caption = (
        f"üé¥ **–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É:** {card['name']}\n"
        f"{card['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {card['rarity']}\n"
        f"‚≠ê **–û—á–∫–∏:** {card['points']}\n"
        f"üé≤ –®–∞–Ω—Å —Ä–µ–¥–∫–æ—Å—Ç–∏: {card['rarity_chance']}%"
        f"{event_notice}"
    )

    try:
        with open(card['image'], 'rb') as photo:
            await update.message.reply_photo(photo=photo, caption=caption, parse_mode='Markdown')
    except FileNotFoundError:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {card['image']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if user_id not in user_data:
        user_data[user_id] = {"inventory": [], "total_points": 0, "last_used": None, "used_promocodes": []}
    
    user_data[user_id]["inventory"].append({
        "card_id": card["id"],
        "name": card["name"],
        "rarity": card["rarity"],
        "points": card["points"],
        "acquired": datetime.now(timezone.utc).isoformat()
    })
    
    user_data[user_id]["total_points"] += card["points"]
    user_data[user_id]['last_used'] = datetime.now(timezone.utc).isoformat()
    save_user_data(user_data)
    
    logger.info(f"User {user_id} received card: {card['name']} (rarity: {card['rarity']})")

async def show_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id]["inventory"]:
        await update.message.reply_text("üì≠ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getcard —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.")
        return
    
    inventory = user_data[user_id]["inventory"]
    total_points = user_data[user_id]["total_points"]
    
    # –°—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    rarity_count = {}
    for card in inventory:
        rarity = card["rarity"]
        rarity_count[rarity] = rarity_count.get(rarity, 0) + 1
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–¥–∫–æ—Å—Ç—è–º–∏
    keyboard = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
    for rarity in RARITY_GROUPS:
        if rarity in rarity_count and rarity_count[rarity] > 0:
            emoji = RARITY_GROUPS[rarity]["emoji"]
            count = rarity_count[rarity]
            keyboard.append([InlineKeyboardButton(f"{emoji} {rarity} ({count})", callback_data=f"rarity_{rarity}")])
    
    # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π (–≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    for event_config in EVENTS_CONFIG.values():
        event_key = event_config["key"]
        if event_key in rarity_count and rarity_count[event_key] > 0:
            emoji = event_config["emoji"]
            count = rarity_count[event_key]
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è (–∞–∫—Ç–∏–≤–Ω–æ/–∑–∞–≤–µ—Ä—à–µ–Ω–æ)
            event_active = event_config["active"] and is_event_active() and event_config["key"] == get_current_event_key()
            event_status = " üîö" if not event_active else " üéâ"
            keyboard.append([InlineKeyboardButton(f"{emoji} {event_key} ({count}){event_status}", callback_data=f"rarity_{event_key}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö
    event_info = ""
    for event_config in EVENTS_CONFIG.values():
        event_key = event_config["key"]
        if event_key in rarity_count:
            event_active = event_config["active"] and is_event_active() and event_config["key"] == get_current_event_key()
            event_status = "–∑–∞–≤–µ—Ä—à–µ–Ω–æ" if not event_active else "–∞–∫—Ç–∏–≤–Ω–æ"
            event_info += f"\n{event_config['emoji']} –ö–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–±—ã—Ç–∏—è {event_key}: {rarity_count[event_key]} —à—Ç. ({event_status})"
    
    stats_text = (
        f"üìä **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:**\n"
        f"üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(inventory)}\n"
        f"‚≠ê –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {total_points}"
        f"{event_info}\n\n"
        f"üé≤ **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:**"
    )
    
    await update.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_rarity_cards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    rarity = query.data.replace("rarity_", "")
    
    card_stats = get_user_card_stats(user_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarity_cards = {card_id: stats for card_id, stats in card_stats.items() if stats["rarity"] == rarity}
    
    if not rarity_cards:
        await query.edit_message_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–¥–∫–æ—Å—Ç–∏: {rarity}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    context.user_data["current_rarity"] = rarity
    context.user_data["rarity_cards"] = list(rarity_cards.items())
    context.user_data["current_card_index"] = 0
    
    await show_card_navigation(query, context)

async def show_card_navigation(query, context):
    user_data = context.user_data
    rarity = user_data["current_rarity"]
    cards = user_data["rarity_cards"]
    current_index = user_data["current_card_index"]
    
    if current_index >= len(cards):
        current_index = 0
        user_data["current_card_index"] = 0
    
    card_id, card_stats = cards[current_index]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–±—ã—Ç–∏–π–Ω–æ–π
    event_mark = ""
    is_event_card = False
    for event_config in EVENTS_CONFIG.values():
        if card_stats['rarity'] == event_config["key"]:
            is_event_card = True
            event_active = event_config["active"] and is_event_active() and event_config["key"] == get_current_event_key()
            event_mark = " üéâ" if event_active else " ‚è≥"
            break
    
    caption = (
        f"üé¥ **{card_stats['name']}**{event_mark}\n"
        f"{card_stats['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {card_stats['rarity']}\n"
        f"üì¶ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {card_stats['count']} —à—Ç.\n"
        f"‚≠ê **–û—á–∫–∏ –∑–∞ —à—Ç—É–∫—É:** {card_stats['points']}\n"
        f"üí∞ **–í—Å–µ–≥–æ –æ—á–∫–æ–≤:** {card_stats['total_points']}\n"
        f"üìÑ **–ö–∞—Ä—Ç–æ—á–∫–∞ {current_index + 1} –∏–∑ {len(cards)}**"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏–π–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    if is_event_card and not is_event_active():
        caption += f"\n\n‚ÑπÔ∏è –°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –≠—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    
    nav_buttons = []
    if len(cards) > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_prev"))
        nav_buttons.append(InlineKeyboardButton(f"{current_index + 1}/{len(cards)}", callback_data="nav_info"))
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data="nav_next"))
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∫–æ—Å—Ç—è–º", callback_data="back_to_rarities")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        with open(card_stats['image'], 'rb') as photo:
            if query.message.photo:
                await query.message.edit_media(
                    media=InputMediaPhoto(photo, caption=caption, parse_mode='Markdown'),
                    reply_markup=reply_markup
                )
            else:
                await query.message.reply_photo(
                    photo=photo,
                    caption=caption,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
    except FileNotFoundError:
        if query.message.photo:
            await query.edit_message_text(
                f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n\n{caption}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query.message.reply_text(
                f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n\n{caption}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

async def handle_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action = query.data
    user_data = context.user_data
    
    if "current_card_index" not in user_data or "rarity_cards" not in user_data:
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /inventory —Å–Ω–æ–≤–∞.")
        return
    
    current_index = user_data["current_card_index"]
    total_cards = len(user_data["rarity_cards"])
    
    if action == "nav_prev":
        user_data["current_card_index"] = (current_index - 1) % total_cards
    elif action == "nav_next":
        user_data["current_card_index"] = (current_index + 1) % total_cards
    elif action == "back_to_rarities":
        user_data.pop("current_rarity", None)
        user_data.pop("rarity_cards", None)
        user_data.pop("current_card_index", None)
        await show_inventory_from_callback(query, context)
        return
    elif action == "nav_info":
        pass
    
    await show_card_navigation(query, context)

async def show_inventory_from_callback(query, context):
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id]["inventory"]:
        await query.edit_message_text("üì≠ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getcard —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.")
        return
    
    inventory = user_data[user_id]["inventory"]
    total_points = user_data[user_id]["total_points"]
    
    rarity_count = {}
    for card in inventory:
        rarity = card["rarity"]
        rarity_count[rarity] = rarity_count.get(rarity, 0) + 1
    
    keyboard = []
    
    for rarity in RARITY_GROUPS:
        if rarity in rarity_count and rarity_count[rarity] > 0:
            emoji = RARITY_GROUPS[rarity]["emoji"]
            count = rarity_count[rarity]
            keyboard.append([InlineKeyboardButton(f"{emoji} {rarity} ({count})", callback_data=f"rarity_{rarity}")])
    
    for event_config in EVENTS_CONFIG.values():
        event_key = event_config["key"]
        if event_key in rarity_count and rarity_count[event_key] > 0:
            emoji = event_config["emoji"]
            count = rarity_count[event_key]
            event_active = event_config["active"] and is_event_active() and event_config["key"] == get_current_event_key()
            event_status = " üîö" if not event_active else " üéâ"
            keyboard.append([InlineKeyboardButton(f"{emoji} {event_key} ({count}){event_status}", callback_data=f"rarity_{event_key}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    event_info = ""
    for event_config in EVENTS_CONFIG.values():
        event_key = event_config["key"]
        if event_key in rarity_count:
            event_active = event_config["active"] and is_event_active() and event_config["key"] == get_current_event_key()
            event_status = "–∑–∞–≤–µ—Ä—à–µ–Ω–æ" if not event_active else "–∞–∫—Ç–∏–≤–Ω–æ"
            event_info += f"\n{event_config['emoji']} –ö–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–±—ã—Ç–∏—è {event_key}: {rarity_count[event_key]} —à—Ç. ({event_status})"
    
    stats_text = (
        f"üìä **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:**\n"
        f"üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(inventory)}\n"
        f"‚≠ê –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {total_points}"
        f"{event_info}\n\n"
        f"üé≤ **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:**"
    )
    
    if query.message.photo:
        await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

async def use_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text(
            "üéüÔ∏è **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:**\n"
            "–í–≤–µ–¥–∏—Ç–µ /promo <–∫–æ–¥>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /promo secret23gifting"
        )
        return
    
    promo_code = context.args[0].lower()
    promo_data = load_promo_data()
    user_data = load_user_data()
    
    if user_id not in user_data:
        user_data[user_id] = {"inventory": [], "total_points": 0, "last_used": None, "used_promocodes": []}
    
    if "used_promocodes" not in user_data[user_id]:
        user_data[user_id]["used_promocodes"] = []
    
    if has_user_used_promo(user_id, promo_code):
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
        return
    
    if promo_code not in promo_data:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!")
        return
    
    promo = promo_data[promo_code]
    
    if promo["uses_left"] <= 0:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!")
        return
    
    if promo["type"] == "random_rarity":
        card = get_random_card_by_rarity(promo["rarity"])
        if not card:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã!")
            return
    elif promo["type"] == "specific_card":
        card = get_card_by_id(promo["card_id"])
        if not card:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã!")
            return
    elif promo["type"] == "random_event":
        card = get_random_event_card(promo["event"])
        if not card:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã —Å–æ–±—ã—Ç–∏—è!")
            return
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞!")
        return
    
    event_notice = ""
    if promo["type"] == "random_event":
        event_notice = f"\nüéâ **–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–ê–Ø –ö–ê–†–¢–û–ß–ö–ê –°–û–ë–´–¢–ò–Ø {promo['event']}!**"
    
    caption = (
        f"üéÅ **–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!**\n"
        f"üé¥ **–ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:** {card['name']}\n"
        f"{card['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {card['rarity']}\n"
        f"‚≠ê **–û—á–∫–∏:** {card['points']}\n"
        f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}"
        f"{event_notice}"
    )
    
    try:
        with open(card['image'], 'rb') as photo:
            await update.message.reply_photo(photo=photo, caption=caption, parse_mode='Markdown')
    except FileNotFoundError:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {card['image']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    promo_data[promo_code]["uses_left"] -= 1
    save_promo_data(promo_data)
    
    mark_promo_used(user_id, promo_code)
    
    add_card_to_user(user_id, card)
    
    uses_left = promo_data[promo_code]["uses_left"]
    if uses_left > 0:
        uses_info = f"–û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses_left}/{promo['max_uses']}"
    else:
        uses_info = "–ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!"
    
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n{uses_info}")

if __name__ == "__main__":
    init_db()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    for rarity, data in RARITY_GROUPS.items():
        for card in data["cards"]:
            if not os.path.exists(card['image']):
                logger.warning(f"Image not found: {card['image']}")
    
    for event_key, event_data in EVENT_CARDS.items():
        for card in event_data["cards"]:
            if not os.path.exists(card['image']):
                logger.warning(f"Event image not found: {card['image']}")
    
    total_base_chance = sum(data["base_chance"] for data in RARITY_GROUPS.values())
    if abs(total_base_chance - 100.0) > 0.1:
        logger.warning(f"Total base chance is {total_base_chance}% (should be 100%)")
    else:
        logger.info(f"Total base chance: {total_base_chance}% (correct)")

    if is_event_active():
        logger.info(f"–°–æ–±—ã—Ç–∏–µ '{EVENT_CONFIG['name']}' –∞–∫—Ç–∏–≤–Ω–æ!")
    else:
        logger.info("–°–æ–±—ã—Ç–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")

    load_promo_data()

    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("getcard", get_card))
    application.add_handler(CommandHandler("inventory", show_inventory))
    application.add_handler(CommandHandler("rarities", show_rarities))
    application.add_handler(CommandHandler("promo", use_promo))
    application.add_handler(CommandHandler("event", show_event_info))
    
    application.add_handler(CallbackQueryHandler(show_rarity_cards, pattern="^rarity_"))
    application.add_handler(CallbackQueryHandler(handle_navigation, pattern="^nav_"))
    application.add_handler(CallbackQueryHandler(show_inventory_from_callback, pattern="^back_to_rarities$"))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway...")
    application.run_polling()
