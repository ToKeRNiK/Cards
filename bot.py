import os
import json
import random
import logging
from datetime import datetime, timedelta, timezone
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8295319122:AAFGvZ1GFqPv8EkCTQnXjSKzd4dOG8rz1bg')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN environment variable is not set!")
    exit(1)

COOLDOWN_MINUTES = 15

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
RARITY_GROUPS = {
    "–û–±—ã—á–Ω–∞—è": {
        "chance": 39,
        "emoji": "‚ö™",
        "cards": [
            {"id": 1, "name": "–ë—É—Ä–≥–µ—Ä –ö–∏–Ω–≥", "image": "cards/Common/card1.jpg", "points": 10},
            {"id": 2, "name": "–°–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "image": "cards/Common/card1.1.jpg", "points": 10},
            {"id": 3, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä –æ–ø—è—Ç—å –Ω—é—Ö–∞–µ—Ç", "image": "cards/Common/card1.2.jpg", "points": 10},
        ]
    },
    "–†–µ–¥–∫–∞—è": {
        "chance": 25,
        "emoji": "üü¢",
        "cards": [
            {"id": 4, "name": "–í–∫—É—Å–Ω–æ –∏ —Ç–æ—á–∫–∞", "image": "cards/Rare/card2.jpg", "points": 50},
            {"id": 5, "name": "–î–≤–∞ –∑–∞–¥—Ä–æ—Ç–∞", "image": "cards/Rare/card2.1.jpg", "points": 50},
        ]
    },
    "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è": {
        "chance": 15,
        "emoji": "üîµ",
        "cards": [
            {"id": 7, "name": "–Ø—Ä–∏–∫", "image": "cards/SuperRare/card3.jpg", "points": 200},
            {"id": 8, "name": "–£–í–ó", "image": "cards/SuperRare/card3.1.jpg", "points": 200},
        ]
    },
    "–≠–ø–∏—á–µ—Å–∫–∞—è": {
        "chance": 10,
        "emoji": "üü£",
        "cards": [
            {"id": 10, "name": "–ú–∏—Ö–∞–∏–ª –î–∏–Ω–æ–∑–∞–≤—Ä", "image": "cards/Epic/card4.jpg", "points": 1000},
            {"id": 11, "name": "–°—Ç—ë–ø–∞ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç", "image": "cards/Epic/card4.1.jpg", "points": 1000},
        ]
    },
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": {
        "chance": 7,
        "emoji": "üî¥",
        "cards": [
            {"id": 13, "name": "–°–∏–≥–º–∞ –ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥—å", "image": "cards/Mythic/card5.jpg", "points": 5000},
            {"id": 14, "name": "–ì—Ä–∏—à–∞ –®–∞–ª—É–Ω", "image": "cards/Mythic/card5.1.jpg", "points": 5000},
            {"id": 15, "name": "–ï–í–†–ê–ó", "image": "cards/Mythic/card5.2.jpg", "points": 5000},
        ]
    },
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": {
        "chance": 3,
        "emoji": "üü°",
        "cards": [
            {"id": 16, "name": "–°—Ç—ë–ø–∞ —Å —Ñ–∞–Ω–∞—Ç–∞–º–∏", "image": "cards/Legendary/card6.jpg", "points": 10000},
        ]
    },
    "–°–µ–∫—Ä–µ—Ç–Ω–∞—è": {
        "chance": 1,
        "emoji": "‚ö´Ô∏è",
        "cards": [
            {"id": 17, "name": "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?", "image": "cards/Secret/card7.jpg", "points": 20000},
            {"id": 18, "name": "–î–µ—Ä–∂–∞—Ç–µ–ª—å —è–∏—Ü –Ø—Ä–∏–∫", "image": "cards/Secret/card7.1.jpg", "points": 30000},
        ]
    },
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open('user_data.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
            for user_id, user_info in data.items():
                if 'last_used' in user_info and user_info['last_used']:
                    if user_info['last_used'].endswith('Z'):
                        user_info['last_used'] = user_info['last_used'].replace('Z', '+00:00')
            return data
    except FileNotFoundError:
        logger.info("user_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª")
        return {}
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è user_data.json, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª")
        return {}

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with open('user_data.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_utc_now():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC"""
    return datetime.now(timezone.utc)

def parse_datetime(dt_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω"""
    if not dt_str:
        return None
    
    try:
        if dt_str.endswith('Z'):
            return datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
        else:
            return datetime.fromisoformat(dt_str)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ {dt_str}: {e}")
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
def get_random_card():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–Ω—Å–∞–º"""
    roll = random.random() * 100
    current = 0
    
    for rarity, data in RARITY_GROUPS.items():
        current += data["chance"]
        if roll <= current:
            card = random.choice(data["cards"]).copy()
            card.update({
                "rarity": rarity,
                "emoji": data["emoji"],
                "rarity_chance": data["chance"]
            })
            return card
    
    # Fallback - –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–∑ –æ–±—ã—á–Ω—ã—Ö
    rarity = "–û–±—ã—á–Ω–∞—è"
    data = RARITY_GROUPS[rarity]
    card = random.choice(data["cards"]).copy()
    card.update({
        "rarity": rarity,
        "emoji": data["emoji"],
        "rarity_chance": data["chance"]
    })
    return card

def format_time_remaining(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏"""
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    
    if hours > 0:
        return f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
    elif minutes > 0:
        return f"{minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
    else:
        return f"{seconds} —Å–µ–∫—É–Ω–¥"

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        rarity_info = "üé≤ **–®–∞–Ω—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–µ–π:**\n"
        for rarity, data in RARITY_GROUPS.items():
            emoji = data["emoji"]
            chance = data["chance"]
            card_count = len(data["cards"])
            rarity_info += f"{emoji} {rarity}: {chance}% ({card_count} –∫–∞—Ä—Ç–æ—á–µ–∫)\n"
        
        await update.message.reply_text(
            "üé¥ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫!**\n\n"
            "üìñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/getcard - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É\n"
            "/inventory - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
            "/rarities - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–¥–∫–æ—Å—Ç—è—Ö\n\n"
            f"‚è∞ **–ö—É–ª–¥–∞—É–Ω:** {COOLDOWN_MINUTES} –º–∏–Ω—É—Ç\n\n"
            f"{rarity_info}",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

async def show_rarities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rarities"""
    try:
        rarity_info = "üé≤ **–®–∞–Ω—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–µ–π:**\n"
        for rarity, data in RARITY_GROUPS.items():
            emoji = data["emoji"]
            chance = data["chance"]
            card_count = len(data["cards"])
            rarity_info += f"{emoji} {rarity}: {chance}% ({card_count} –∫–∞—Ä—Ç–æ—á–µ–∫)\n"
        
        await update.message.reply_text(rarity_info, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /rarities: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

async def get_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getcard"""
    try:
        user_id = str(update.effective_user.id)
        user_data = load_user_data()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        last_used_str = user_data.get(user_id, {}).get('last_used')
        if last_used_str:
            last_used = parse_datetime(last_used_str)
            if last_used:
                current_time = get_utc_now()
                time_passed = current_time - last_used
                cooldown_duration = timedelta(minutes=COOLDOWN_MINUTES)
                
                if time_passed < cooldown_duration:
                    remaining_time = cooldown_duration - time_passed
                    time_message = format_time_remaining(int(remaining_time.total_seconds()))
                    
                    await update.message.reply_text(
                        f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {time_message}"
                    )
                    return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        card = get_random_card()
        
        caption = (
            f"üé¥ **–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É:** {card['name']}\n"
            f"{card['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {card['rarity']}\n"
            f"‚≠ê **–û—á–∫–∏:** {card['points']}\n"
            f"üé≤ –®–∞–Ω—Å —Ä–µ–¥–∫–æ—Å—Ç–∏: {card['rarity_chance']}%"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        try:
            if os.path.exists(card['image']):
                with open(card['image'], 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo, 
                        caption=caption, 
                        parse_mode='Markdown'
                    )
            else:
                await update.message.reply_text(
                    f"üìÑ {caption}\n\n"
                    f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                f"üìÑ {caption}\n\n"
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                parse_mode='Markdown'
            )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_data:
            user_data[user_id] = {
                "inventory": [], 
                "total_points": 0,
                "username": update.effective_user.username
            }
        
        user_data[user_id]["inventory"].append({
            "card_id": card["id"],
            "name": card["name"],
            "rarity": card["rarity"],
            "points": card["points"],
            "acquired": get_utc_now().isoformat()
        })
        
        user_data[user_id]["total_points"] += card["points"]
        user_data[user_id]['last_used'] = get_utc_now().isoformat()
        user_data[user_id]['username'] = update.effective_user.username
        
        save_user_data(user_data)
        
        logger.info(f"User {user_id} received card: {card['name']} ({card['rarity']})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /getcard: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏")

async def show_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /inventory"""
    try:
        user_id = str(update.effective_user.id)
        user_data = load_user_data()
        
        if user_id not in user_data or not user_data[user_id]["inventory"]:
            await update.message.reply_text(
                "üì≠ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getcard —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É."
            )
            return
        
        inventory = user_data[user_id]["inventory"]
        total_points = user_data[user_id]["total_points"]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
        rarity_count = {}
        for card in inventory:
            rarity = card["rarity"]
            rarity_count[rarity] = rarity_count.get(rarity, 0) + 1
        
        stats_text = f"üìä **–ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** @{update.effective_user.username}:\n"
        stats_text += f"üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(inventory)}\n"
        stats_text += f"‚≠ê –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {total_points}\n\n"
        
        stats_text += "üé≤ **–ü–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º:**\n"
        for rarity, count in sorted(rarity_count.items(), 
                                  key=lambda x: list(RARITY_GROUPS.keys()).index(x[0])):
            emoji = RARITY_GROUPS[rarity]["emoji"]
            stats_text += f"{emoji} {rarity}: {count} —à—Ç.\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–∞—Ä—Ç–æ—á–µ–∫
        stats_text += f"\nüÜï **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ:**\n"
        recent_cards = inventory[-5:][::-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for i, card in enumerate(recent_cards, 1):
            emoji = RARITY_GROUPS[card["rarity"]]["emoji"]
            stats_text += f"{i}. {emoji} {card['name']} ({card['points']} –æ—á–∫–æ–≤)\n"
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /inventory: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    missing_images = []
    for rarity, data in RARITY_GROUPS.items():
        for card in data["cards"]:
            if not os.path.exists(card['image']):
                missing_images.append(card['image'])
                logger.warning(f"Image not found: {card['image']}")
    
    if missing_images:
        logger.warning(f"–í—Å–µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {len(missing_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã —à–∞–Ω—Å–æ–≤
    total_chance = sum(data["chance"] for data in RARITY_GROUPS.values())
    if total_chance != 100:
        logger.warning(f"Total chance is {total_chance}% (should be 100%)")

    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("getcard", get_card))
        application.add_handler(CommandHandler("inventory", show_inventory))
        application.add_handler(CommandHandler("rarities", show_rarities))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
