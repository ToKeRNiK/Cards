import os
import json
import random
import logging
import psycopg2
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from psycopg2.extras import RealDictCursor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8295319122:AAFGvZ1GFqPv8EkCTQnXjSKzd4dOG8rz1bg')
COOLDOWN_MINUTES = 5

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.environ.get('DATABASE_URL', 'postgresql://postgres:GjvKELSoRVzbyXCnxEMBdWvOTiCvufbs@postgres.railway.internal:5432/railway')

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–û–ë–´–¢–ò–ô ====================
EVENTS_CONFIG = {
    "–ö–∞–∑–∞–Ω—å2025": {
        "name": "–ö–∞–∑–∞–Ω—å2025",
        "key": "–ö–∞–∑–∞–Ω—å",
        "active": False,
        "start_date": "2025-10-27",
        "end_date": "2025-10-29", 
        "emoji": "üèôÔ∏è",
        "chance": 8
    },
    "–•—ç–ª–ª–æ—É–∏–Ω2025": {
        "name": "–•—ç–ª–ª–æ—É–∏–Ω2025",
        "key": "–•—ç–ª–ª–æ—É–∏–Ω",
        "active": True,
        "start_date": "2025-10-29",
        "end_date": "2025-10-29",
        "emoji": "üéÉ",
        "chance": 8
    }
}

CURRENT_EVENT = "–•—ç–ª–ª–æ—É–∏–Ω2025"
EVENT_CONFIG = EVENTS_CONFIG[CURRENT_EVENT]

# ==================== –û–°–ù–û–í–ù–´–ï –ö–ê–†–¢–û–ß–ö–ò ====================
RARITY_GROUPS = {
    "–†–µ–¥–∫–∞—è": {
        "base_chance": 30.1,
        "adjusted_chance": 27.692,
        "emoji": "üü¢",
        "cards": [
            {"id": 2.1, "name": "–î–≤–∞ –∑–∞–¥—Ä–æ—Ç–∞", "image": "cards/Rare/card2.1.jpg", "points": 50},
            {"id": 2.2, "name": "–£–º–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ –æ—á–∫–∞—Ö —Å–∫–∞—á–∞—Ç—å –æ–±–æ–∏", "image": "cards/Rare/card2.2.jpg", "points": 50},
            {"id": 2.3, "name": "–ö–æ—Å—Ç—è –í–æ–¥–æ–ª–∞–∑", "image": "cards/Rare/card2.3.jpg", "points": 50},
            {"id": 2.4, "name": "–ú–∏—Ö–∞–∏–ª –î–∏–Ω–æ–∑–∞–≤—Ä", "image": "cards/Rare/card2.4.jpg", "points": 50},
            {"id": 2.5, "name": "–ú–∏—Ö–∞–∏–ª –ú–µ–≤–¥–µ–¥", "image": "cards/Rare/card2.5.jpg", "points": 50},
            {"id": 2.6, "name": "–ë—É—Ä–≥–µ—Ä –ö–∏–Ω–≥", "image": "cards/Rare/card2.6.jpg", "points": 50},
            {"id": 2.7, "name": "–°–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "image": "cards/Rare/card2.7.jpg", "points": 50},
            {"id": 2.8, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä –æ–ø—è—Ç—å –Ω—é—Ö–∞–µ—Ç", "image": "cards/Rare/card2.8.jpg", "points": 50},
            {"id": 2.9, "name": "–ö–æ—Å—Ç—è", "image": "cards/Rare/card2.9.jpg", "points": 50},
        ]
    },
    "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è": {
        "base_chance": 23.8,
        "adjusted_chance": 21.896,
        "emoji": "üîµ",
        "cards": [
            {"id": 3, "name": "–Ø—Ä–∏–∫", "image": "cards/SuperRare/card3.jpg", "points": 200},
            {"id": 3.1, "name": "–£–í–ó", "image": "cards/SuperRare/card3.1.jpg", "points": 200},
            {"id": 3.2, "name": "–ß–∏–∂–∏–∫", "image": "cards/SuperRare/card3.2.jpg", "points": 200},
            {"id": 3.3, "name": "–§–∏–∫—Å –≤ –ü—Ä–∞–π–º–µ", "image": "cards/SuperRare/card3.3.jpg", "points": 200},
            {"id": 3.4, "name": "–ö–ª—É–±–Ω–∏—á–Ω–∞—è –∫—Ä–µ–º–∫–∞", "image": "cards/SuperRare/card3.4.jpg", "points": 200},
            {"id": 3.5, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä —É –∑–µ—Ä–∫–∞–ª–∞", "image": "cards/SuperRare/card3.5.jpg", "points": 200},
            {"id": 3.6, "name": "–ú–æ–ª–æ—á–Ω–∞—è –∫—Ä–µ–º–∫–∞", "image": "cards/SuperRare/card3.6.jpg", "points": 200},
            {"id": 3.7, "name": "–°–≤–∏–Ω—å—è", "image": "cards/SuperRare/card3.7.jpg", "points": 200},
        ]
    },
    "–≠–ø–∏—á–µ—Å–∫–∞—è": {
        "base_chance": 17.6,
        "adjusted_chance": 16.192,
        "emoji": "üü£",
        "cards": [
            {"id": 4, "name": "–ú–∏—Ö–∞–∏–ª –î–∏–Ω–æ–∑–∞–≤—Ä", "image": "cards/Epic/card4.jpg", "points": 1000},
            {"id": 4.1, "name": "–°—Ç—ë–ø–∞ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç", "image": "cards/Epic/card4.1.jpg", "points": 1000},
            {"id": 4.2, "name": "–ö–∏–º–º–∏—Ö mentality", "image": "cards/Epic/card4.2.jpg", "points": 1000},
            {"id": 4.3, "name": "–í–µ—Å—ë–ª—ã–π –ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥—å", "image": "cards/Epic/card4.3.jpg", "points": 1000},
            {"id": 4.4, "name": "–ì—Ä—É—Å—Ç–Ω—ã–π –¢–∏–º–æ—Ñ–µ–π", "image": "cards/Epic/card4.4.jpg", "points": 1000},
            {"id": 4.5, "name": "–í—ë—Å–µ–ª—ã–π –¢–∏–º–æ—Ñ–µ–π", "image": "cards/Epic/card4.5.jpg", "points": 1000},
            {"id": 4.6, "name": "–ú–∏—Ä–æ—Å–ª–∞–≤ –∏ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ –∫–∞–±–∞–Ω—ã", "image": "cards/Epic/card4.6.jpg", "points": 1000},
            {"id": 4.7, "name": "–ö—Ä–µ–º–∫–∞ —Å –º–æ—Ä—Å–∫–æ–π —Å–æ–ª—å—é", "image": "cards/Epic/card4.7.jpg", "points": 1000},
            {"id": 4.8, "name": "–í–∫—É—Å–Ω–æ –∏ —Ç–æ—á–∫–∞", "image": "cards/Epic/card4.8.jpg", "points": 1000},
            {"id": 4.9, "name": "–®–∞–ø–æ—á–∫–∞ –¥–ª—è –ø–ª–∞–≤–∞–Ω–∏—è", "image": "cards/Epic/card4.9.jpg", "points": 1000},
        ]
    },
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": {
        "base_chance": 15.6,
        "adjusted_chance": 14.352,
        "emoji": "üî¥",
        "cards": [
            {"id": 5, "name": "–°–∏–≥–º–∞ –ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥—å", "image": "cards/Mythic/card5.jpg", "points": 5000},
            {"id": 5.1, "name": "–ì—Ä–∏—à–∞ –®–∞–ª—É–Ω", "image": "cards/Mythic/card5.1.jpg", "points": 5000},
            {"id": 5.2, "name": "–ï–í–†–ê–ó", "image": "cards/Mythic/card5.2.jpg", "points": 5000},
            {"id": 5.3, "name": "–°—á–∞—Å—Ç–ª–∏–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä", "image": "cards/Mythic/card5.3.jpg", "points": 5000},
            {"id": 5.4, "name": "–ú–∏—Ö–∞–∏–ª –ß–∏–∫–∞—Ç–∏–ª–æ", "image": "cards/Mythic/card5.4.jpg", "points": 5000},
            {"id": 5.5, "name": "–ú–∏—à–∞ Combination 2", "image": "cards/Mythic/card5.5.jpg", "points": 5000},
            {"id": 5.6, "name": "–í–∞–Ω—è –ú–∞–∫–∞–∫–∞", "image": "cards/Mythic/card5.6.jpg", "points": 5000},
            {"id": 5.7, "name": "–ú–∏—Ä–æ—Å–ª–∞–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–º", "image": "cards/Mythic/card5.7.jpg", "points": 5000},
            {"id": 5.8, "name": "–ö–æ—Ñ–µ–π–Ω–∞—è –∫—Ä–µ–º–∫–∞", "image": "cards/Mythic/card5.8.jpg", "points": 5000},
            {"id": 5.9, "name": "–ú–∏—à–∞ –ú–µ–¥–≤–µ–¥—å –Ω–∞ –û–ë–ñ", "image": "cards/Mythic/card5.9.jpg", "points": 5000},
        ]
    },
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": {
        "base_chance": 10.4,
        "adjusted_chance": 9.568,
        "emoji": "üü°",
        "cards": [
            {"id": 6, "name": "–°—Ç—ë–ø–∞ —Å —Ñ–∞–Ω–∞—Ç–∞–º–∏", "image": "cards/Legendary/card6.jpg", "points": 10000},
            {"id": 6.1, "name": "–¢–∏–º–æ—Ñ–µ–π –∏ –í–∞–Ω—è", "image": "cards/Legendary/card6.1.jpg", "points": 10000},
            {"id": 6.2, "name": "–ú–∏—Ö–∞–∏–ª –ú–µ–≤–¥–µ–¥—å –ø–æ—Å–ª–µ —Å–æ—Ä–µ–≤", "image": "cards/Legendary/card6.2.jpg", "points": 10000},
            {"id": 6.3, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å —Ü–≤–µ—Ç–æ—á–∫–æ–º", "image": "cards/Legendary/card6.3.jpg", "points": 10000},
            {"id": 6.4, "name": "–ë—É–ª—å–±–∞ –ú–µ–Ω", "image": "cards/Legendary/card6.4.jpg", "points": 10000},
            {"id": 6.5, "name": "–ö–∞–∑–∞–Ω—Å–∫–∏–π –¢–∞—Ä–∞–∫–∞–Ω", "image": "cards/Legendary/card6.5.jpg", "points": 10000},
            {"id": 6.6, "name": "–ú–∏—à–∞ Combination", "image": "cards/Legendary/card6.6.jpg", "points": 10000},
            {"id": 6.7, "name": "–ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥ –Ω–∞ —Å–æ—Ä–µ–≤–∞—Ö", "image": "cards/Legendary/card6.7.jpg", "points": 10000},
            {"id": 6.8, "name": "–ú–∞—Ä–∫ –•–∞–π–∑–µ–Ω–±–µ—Ä–≥", "image": "cards/Legendary/card6.8.jpg", "points": 10000},
            {"id": 6.9, "name": "–°–∏–≥–º–∞ –∏ 27", "image": "cards/Legendary/card6.9.jpg", "points": 10000},
            {"id": 6.11, "name": "–†–∏–∫ –ì—Ä–∞–π–º—Å", "image": "cards/Legendary/card6.10.jpg", "points": 10000},
            {"id": 6.12, "name": "–†–∏–∫ –ì—Ä–∞–π–º—Å", "image": "cards/Legendary/card6.11.jpg", "points": 10000},
        ]
    },
    "–°–µ–∫—Ä–µ—Ç–Ω–∞—è": {
        "base_chance": 2,
        "adjusted_chance": 1.84,
        "emoji": "‚ö´Ô∏è",
        "cards": [
            {"id": 7, "name": "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?", "image": "cards/Secret/card7.jpg", "points": 20000},
            {"id": 7.1, "name": "–î–µ—Ä–∂–∞—Ç–µ–ª—å —è–∏—Ü –Ø—Ä–∏–∫", "image": "cards/Secret/card7.1.jpg", "points": 20000},
            {"id": 7.2, "name": "–ö–µ—Ñ–∞—Å", "image": "cards/Secret/card7.2.jpg", "points": 20000},
            {"id": 7.3, "name": "–í–ª–∞–¥–µ–ª–µ—Ü –ö–µ—Ñ–∞—Å–∞", "image": "cards/Secret/card7.3.jpg", "points": 20000},
            {"id": 7.4, "name": "–°—Ç—ë–ø–∞ –∂—É—ë—Ç —à–∞–ø–æ—á–∫—É", "image": "cards/Secret/card7.4.jpg", "points": 20000},
            {"id": 7.5, "name": "–í–ª–∞–¥–µ–ª–µ—Ü –ë—É—Ä–≥–µ—Ä –ö–∏–Ω–≥–∞", "image": "cards/Secret/card7.5.jpg", "points": 20000},
            {"id": 7.6, "name": "–ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥—å –∫—É–ø–∏–ª –ù–∏–≥–µ—Ä–∏—é", "image": "cards/Secret/card7.6.jpg", "points": 20000},
            {"id": 7.7, "name": "twenty-seven", "image": "cards/Secret/card7.7.jpg", "points": 20000},
            {"id": 7.8, "name": "–ú–∞—Ä–∫ –≤ —Ä–æ–∑–æ–≤–æ–π –º–∞—à–∏–Ω–µ", "image": "cards/Secret/card7.8.jpg", "points": 20000},
        ]
    },
    "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è": {
        "base_chance": 0.5,
        "adjusted_chance": 0.46,
        "emoji": "üü†",
        "cards": [
            {"id": 8, "name": "–ú–∏—à–∏ –≤ –ø–æ–µ–∑–¥–µ", "image": "cards/Exclusive/card8.jpg", "points": 50000},
            {"id": 8.1, "name": "–ú–∏—à–∏ –≤ –¢—É–∞–ø—Å–µ", "image": "cards/Exclusive/card8.1.jpg", "points": 50000},
            {"id": 8.2, "name": "–ú–µ—Å—Ç–æ —Å–ø–∞–≤–Ω–∞ –≥–∞–¥–æ—Å—Ç–µ–π", "image": "cards/Exclusive/card8.2.jpg", "points": 50000},
            {"id": 8.3, "name": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–π", "image": "cards/Exclusive/card8.3.jpg", "points": 50000},
        ]
    },
}

# ==================== –ö–ê–†–¢–û–ß–ö–ò –°–û–ë–´–¢–ò–ô ====================
EVENT_CARDS = {
    "–ö–∞–∑–∞–Ω—å": {
        "chance": EVENTS_CONFIG["–ö–∞–∑–∞–Ω—å2025"]["chance"],
        "emoji": EVENTS_CONFIG["–ö–∞–∑–∞–Ω—å2025"]["emoji"],
        "cards": [
            {"id": 9.1, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä –≤ –ö–∞–∑–∞–Ω–∏", "image": "cards/Kazan/card9.1.jpg", "points": 25000},
            {"id": 9.2, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä –≤ –∫–∞–∑–∞–Ω—Å–∫–æ–º —Å–∞–º–æ–ª—ë—Ç–µ", "image": "cards/Kazan/card9.2.jpg", "points": 25000},
            {"id": 9.3, "name": "–ú–∏—à–∞ –ú–µ–≤–¥–µ–¥—å —Å –∫–∞–∑–∞–Ω—Å–∫–∏–º –º–µ–¥–≤–µ–¥–µ–º", "image": "cards/Kazan/card9.3.jpg", "points": 25000},
            {"id": 9.4, "name": "–ú–∏—Ö–∞–∏–ª –î–∏–Ω–æ–∑–∞–≤—Ä –≤ –ö–∞–∑–∞–Ω–∏", "image": "cards/Kazan/card9.4.jpg", "points": 25000},
            {"id": 9.5, "name": "–ú–∏–Ω–∏ –õ–∏—Ç–≤–∏–Ω –≤ –ö–∞–∑–∞–Ω–∏", "image": "cards/Kazan/card9.5.jpg", "points": 25000},
            {"id": 9.6, "name": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —á–µ—Ç–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –ö–∞–∑–∞–Ω—å—é", "image": "cards/Kazan/card9.6.jpg", "points": 25000},
            {"id": 9.7, "name": "'–í–∏–¥–∏—à—å –≤–æ–Ω —Ç–∞–º –≤–æ–Ω –¥—Ä–æ–Ω—ã –ª–µ—Ç—è—Ç'", "image": "cards/Kazan/card9.7.jpg", "points": 25000},
            {"id": 9.8, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∏–¥", "image": "cards/Kazan/card9.8.jpg", "points": 25000},
        ]
    },
    "–•—ç–ª–ª–æ—É–∏–Ω": {
        "chance": EVENTS_CONFIG["–•—ç–ª–ª–æ—É–∏–Ω2025"]["chance"],
        "emoji": EVENTS_CONFIG["–•—ç–ª–ª–æ—É–∏–Ω2025"]["emoji"],
        "cards": [
            {"id": 10.1, "name": "–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–π –ú–∏—à–∞ –ú–µ–¥–≤–µ–¥—å", "image": "cards/Halloween/card10.1.jpg", "points": 30000},
            {"id": 10.2, "name": "–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–π –Ø—Ä–∏–∫", "image": "cards/Halloween/card10.2.jpg", "points": 30000},
            {"id": 10.3, "name": "–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–π –ú–∏—à–∞ –î–∏–Ω–æ–∑–∞–≤—Ä", "image": "cards/Halloween/card10.3.jpg", "points": 30000},
            {"id": 10.4, "name": "–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–π –û–ø–µ—Ä–∞—Ç–æ—Ä", "image": "cards/Halloween/card10.4.jpg", "points": 30000},
            {"id": 10.5, "name": "–•—ç–ª–ª–æ—É–∏–Ω—Å–∫–∏–π –ú–∏–Ω–∏ –õ–∏—Ç–≤–∏–Ω", "image": "cards/Halloween/card10.5.jpg", "points": 30000},
        ]
    },
}

# ==================== –ü–†–û–ú–û–ö–û–î–´ ====================
PROMOCODES = {
    "secret23gifting": {
        "type": "random_rarity",
        "rarity": "–°–µ–∫—Ä–µ—Ç–Ω–∞—è",
        "uses_left": 1,
        "max_uses": 1,
        "description": "–°–ª—É—á–∞–π–Ω–∞—è —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"
    },
    "legendary24gifting": {
        "type": "random_rarity", 
        "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
        "uses_left": 1,
        "max_uses": 1,
        "description": "–°–ª—É—á–∞–π–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞"
    },
    "yarikgivt2025": {
        "type": "specific_card",
        "card_id": 7.1,
        "uses_left": 1,
        "max_uses": 1,
        "description": "–î–µ—Ä–∂–∞—Ç–µ–ª—å —è–∏—Ü –Ø—Ä–∏–∫"
    },
    "rickgrimespeakedit2025": {
        "type": "specific_card",
        "card_id": 6.11,
        "uses_left": 2,
        "max_uses": 2,
        "description": "–†–∏–∫ –ì—Ä–∞–π–º—Å"
    },
    "kotoriyhour2025": {
        "type": "specific_card",
        "card_id": 7,
        "uses_left": 5,
        "max_uses": 5,
        "description": "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?"
    },
    "halakefasiche4327": {
        "type": "specific_card",
        "card_id": 7.2,
        "uses_left": 3,
        "max_uses": 3,
        "description": "–ö–µ—Ñ–∞—Å"
    },
    "stem27onixfree": {
        "type": "specific_card", 
        "card_id": 7.7,
        "uses_left": 5,
        "max_uses": 5,
        "description": "twenty-seven"
    },
    "kazanrandom2025": {
        "type": "random_event",
        "event": "–ö–∞–∑–∞–Ω—å",
        "uses_left": 10,
        "max_uses": 10,
        "description": "–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è –ö–∞–∑–∞–Ω—å"
    },
    "halloweenrandom2025": {
        "type": "random_event",
        "event": "–•—ç–ª–ª–æ—É–∏–Ω",
        "uses_left": 10,
        "max_uses": 10,
        "description": "–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è –•—ç–ª–ª–æ—É–∏–Ω"
    },
}

# ==================== –ö–†–ê–§–¢–ò–ù–ì ====================
CRAFT_RECIPES = {
    "–†–µ–¥–∫–∞—è": {
        "ingredients": [{"rarity": "–†–µ–¥–∫–∞—è", "count": 5}],
        "result": "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è",
        "chance": 100,
        "description": "5 —Ä–µ–¥–∫–∏—Ö ‚Üí 1 —Å–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è"
    },
    "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è": {
        "ingredients": [{"rarity": "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è", "count": 3}],
        "result": "–≠–ø–∏—á–µ—Å–∫–∞—è", 
        "chance": 100,
        "description": "3 —Å–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏—Ö ‚Üí 1 —ç–ø–∏—á–µ—Å–∫–∞—è"
    },
    "–≠–ø–∏—á–µ—Å–∫–∞—è": {
        "ingredients": [{"rarity": "–≠–ø–∏—á–µ—Å–∫–∞—è", "count": 3}],
        "result": "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è",
        "chance": 80,
        "description": "3 —ç–ø–∏—á–µ—Å–∫–∏—Ö ‚Üí 1 –º–∏—Ñ–∏—á–µ—Å–∫–∞—è (80% —à–∞–Ω—Å)"
    },
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": {
        "ingredients": [{"rarity": "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è", "count": 2}],
        "result": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
        "chance": 60,
        "description": "2 –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö ‚Üí 1 –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è (60% —à–∞–Ω—Å)"
    },
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": {
        "ingredients": [{"rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", "count": 2}],
        "result": "–°–µ–∫—Ä–µ—Ç–Ω–∞—è",
        "chance": 40,
        "description": "2 –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö ‚Üí 1 —Å–µ–∫—Ä–µ—Ç–Ω–∞—è (40% —à–∞–Ω—Å)"
    },
    "–°–µ–∫—Ä–µ—Ç–Ω–∞—è": {
        "ingredients": [{"rarity": "–°–µ–∫—Ä–µ—Ç–Ω–∞—è", "count": 2}],
        "result": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è",
        "chance": 20,
        "description": "2 —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö ‚Üí 1 —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è (20% —à–∞–Ω—Å)"
    }
}

# ==================== –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ù–ê–ì–†–ê–î–´ ====================
DAILY_REWARDS = {
    1: {"type": "points", "amount": 1000, "description": "1000 –æ—á–∫–æ–≤"},
    2: {"type": "random_card", "rarity": "–†–µ–¥–∫–∞—è", "description": "–°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞"},
    3: {"type": "points", "amount": 2000, "description": "2000 –æ—á–∫–æ–≤"},
    4: {"type": "random_card", "rarity": "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è", "description": "–°–ª—É—á–∞–π–Ω–∞—è —Å–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞"},
    5: {"type": "points", "amount": 5000, "description": "5000 –æ—á–∫–æ–≤"},
    6: {"type": "random_card", "rarity": "–≠–ø–∏—á–µ—Å–∫–∞—è", "description": "–°–ª—É—á–∞–π–Ω–∞—è —ç–ø–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞"},
    7: {"type": "special", "description": "–°–£–ü–ï–† –ü–†–ò–ó: —Å–ª—É—á–∞–π–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞!"}
}

# ==================== –ö–ê–°–¢–û–ú–ù–´–ï –ü–†–û–§–ò–õ–ò ====================
PROFILE_TITLES = {
    "–ù–æ–≤–∏—á–æ–∫": {"requirement": "default", "emoji": "üë∂"},
    "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä": {"requirement": "total_cards_50", "emoji": "üìö"},
    "–≠–∫—Å–ø–µ—Ä—Ç": {"requirement": "total_cards_100", "emoji": "üéì"},
    "–ú–∞—Å—Ç–µ—Ä": {"requirement": "total_cards_200", "emoji": "üèÜ"},
    "–õ–µ–≥–µ–Ω–¥–∞": {"requirement": "total_cards_500", "emoji": "‚≠ê"},
    "–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Ä–µ–¥–∫–æ—Å—Ç—è–º–∏": {"requirement": "all_rare_cards", "emoji": "üéØ"},
    "–ë–æ–≥–∞—á": {"requirement": "total_points_100000", "emoji": "üí∞"},
    "–ò—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π": {"requirement": "all_event_cards", "emoji": "üß≠"}
}

PROFILE_FRAMES = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è": {"requirement": "default", "color": "‚ö™"},
    "–ó–æ–ª–æ—Ç–∞—è": {"requirement": "total_points_50000", "color": "üü°"},
    "–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è": {"requirement": "total_points_200000", "color": "‚ö™"},
    "–†–∞–¥—É–∂–Ω–∞—è": {"requirement": "all_rarity_cards", "color": "üåà"},
    "–û–≥–Ω–µ–Ω–Ω–∞—è": {"requirement": "total_cards_300", "color": "üî•"},
    "–õ–µ–¥—è–Ω–∞—è": {"requirement": "special_achievement", "color": "‚ùÑÔ∏è"}
}

# ==================== –ú–ò–ù–ò-–ò–ì–†–´ ====================
MINIGAME_CONFIG = {
    "roulette": {
        "win_chance": 40,
        "multipliers": {
            "–†–µ–¥–∫–∞—è": 2,
            "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è": 3,
            "–≠–ø–∏—á–µ—Å–∫–∞—è": 5,
            "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": 8,
            "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 15,
            "–°–µ–∫—Ä–µ—Ç–Ω–∞—è": 25,
            "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è": 50
        }
    },
    "guess_rarity": {
        "reward_multiplier": 2,
        "time_limit": 30
    }
}

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
def get_db_connection():
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    return conn

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id TEXT PRIMARY KEY,
            inventory JSONB,
            total_points INTEGER DEFAULT 0,
            last_used TIMESTAMP WITH TIME ZONE,
            used_promocodes JSONB,
            daily_streak INTEGER DEFAULT 0,
            last_daily TIMESTAMP WITH TIME ZONE,
            profile_data JSONB
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS promocodes (
            code TEXT PRIMARY KEY,
            type TEXT NOT NULL,
            rarity TEXT,
            card_id REAL,
            event_name TEXT,
            uses_left INTEGER,
            max_uses INTEGER,
            description TEXT
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS used_promocodes (
            user_id TEXT,
            promo_code TEXT,
            used_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            PRIMARY KEY (user_id, promo_code)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –æ–±–º–µ–Ω–æ–≤
    cur.execute('''
        CREATE TABLE IF NOT EXISTS trades (
            trade_id SERIAL PRIMARY KEY,
            user1_id TEXT NOT NULL,
            user2_id TEXT NOT NULL,
            user1_cards JSONB,
            user2_cards JSONB,
            status TEXT DEFAULT 'pending',
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            completed_at TIMESTAMP WITH TIME ZONE
        )
    ''')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    for code, data in PROMOCODES.items():
        cur.execute('''
            INSERT INTO promocodes (code, type, rarity, card_id, event_name, uses_left, max_uses, description)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (code) DO UPDATE SET
                uses_left = EXCLUDED.uses_left
        ''', (
            code,
            data["type"],
            data.get("rarity"),
            data.get("card_id"),
            data.get("event"),
            data["uses_left"],
            data["max_uses"],
            data["description"]
        ))
    
    conn.commit()
    cur.close()
    conn.close()

def load_user_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute('SELECT * FROM users')
    users = cur.fetchall()
    
    user_data = {}
    for user in users:
        user_data[user['user_id']] = {
            "inventory": user['inventory'] or [],
            "total_points": user['total_points'] or 0,
            "last_used": user['last_used'].isoformat() if user['last_used'] else None,
            "used_promocodes": user['used_promocodes'] or [],
            "daily_streak": user['daily_streak'] or 0,
            "last_daily": user['last_daily'].isoformat() if user['last_daily'] else None,
            "profile_data": user['profile_data'] or {"title": "–ù–æ–≤–∏—á–æ–∫", "frame": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "bio": ""}
        }
    
    cur.close()
    conn.close()
    return user_data

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    for user_id, user_info in data.items():
        cur.execute('''
            INSERT INTO users (user_id, inventory, total_points, last_used, used_promocodes, daily_streak, last_daily, profile_data)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (user_id) DO UPDATE SET
                inventory = EXCLUDED.inventory,
                total_points = EXCLUDED.total_points,
                last_used = EXCLUDED.last_used,
                used_promocodes = EXCLUDED.used_promocodes,
                daily_streak = EXCLUDED.daily_streak,
                last_daily = EXCLUDED.last_daily,
                profile_data = EXCLUDED.profile_data
        ''', (
            user_id,
            json.dumps(user_info["inventory"]),
            user_info["total_points"],
            user_info["last_used"],
            json.dumps(user_info.get("used_promocodes", [])),
            user_info.get("daily_streak", 0),
            user_info.get("last_daily"),
            json.dumps(user_info.get("profile_data", {"title": "–ù–æ–≤–∏—á–æ–∫", "frame": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "bio": ""}))
        ))
    
    conn.commit()
    cur.close()
    conn.close()

def load_promo_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute('SELECT * FROM promocodes')
    promos = cur.fetchall()
    
    promo_data = {}
    for promo in promos:
        promo_data[promo['code']] = {
            "type": promo['type'],
            "rarity": promo['rarity'],
            "card_id": promo['card_id'],
            "event": promo['event_name'],
            "uses_left": promo['uses_left'],
            "max_uses": promo['max_uses'],
            "description": promo['description']
        }
    
    cur.close()
    conn.close()
    return promo_data

def save_promo_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    for code, promo_info in data.items():
        cur.execute('''
            INSERT INTO promocodes (code, type, rarity, card_id, event_name, uses_left, max_uses, description)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (code) DO UPDATE SET
                uses_left = EXCLUDED.uses_left
        ''', (
            code,
            promo_info["type"],
            promo_info.get("rarity"),
            promo_info.get("card_id"),
            promo_info.get("event"),
            promo_info["uses_left"],
            promo_info["max_uses"],
            promo_info["description"]
        ))
    
    conn.commit()
    cur.close()
    conn.close()

def has_user_used_promo(user_id, promo_code):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–æ–∫–æ–¥"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('SELECT 1 FROM used_promocodes WHERE user_id = %s AND promo_code = %s', (user_id, promo_code))
    result = cur.fetchone()
    
    cur.close()
    conn.close()
    return result is not None

def mark_promo_used(user_id, promo_code):
    """–ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''
        INSERT INTO used_promocodes (user_id, promo_code)
        VALUES (%s, %s)
        ON CONFLICT (user_id, promo_code) DO NOTHING
    ''', (user_id, promo_code))
    
    conn.commit()
    cur.close()
    conn.close()

# ==================== –û–ë–ú–ï–ù –ö–ê–†–¢–û–ß–ö–ê–ú–ò ====================
def create_trade(user1_id, user2_id, user1_cards, user2_cards):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–º–µ–Ω–∞"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''
        INSERT INTO trades (user1_id, user2_id, user1_cards, user2_cards)
        VALUES (%s, %s, %s, %s)
        RETURNING trade_id
    ''', (user1_id, user2_id, json.dumps(user1_cards), json.dumps(user2_cards)))
    
    trade_id = cur.fetchone()[0]
    conn.commit()
    cur.close()
    conn.close()
    
    return trade_id

def get_trade(trade_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–º–µ–Ω–µ"""
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute('SELECT * FROM trades WHERE trade_id = %s', (trade_id,))
    trade = cur.fetchone()
    
    cur.close()
    conn.close()
    return trade

def update_trade_status(trade_id, status):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–º–µ–Ω–∞"""
    conn = get_db_connection()
    cur = conn.cursor()
    
    cur.execute('''
        UPDATE trades 
        SET status = %s, completed_at = NOW()
        WHERE trade_id = %s
    ''', (status, trade_id))
    
    conn.commit()
    cur.close()
    conn.close()

def get_user_trades(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±–º–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    
    cur.execute('''
        SELECT * FROM trades 
        WHERE (user1_id = %s OR user2_id = %s) 
        AND status = 'pending'
        ORDER BY created_at DESC
    ''', (user_id, user_id))
    
    trades = cur.fetchall()
    cur.close()
    conn.close()
    return trades

# ==================== –°–ò–°–¢–ï–ú–ê –°–û–ë–´–¢–ò–ô ====================
def is_event_active():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    if not EVENT_CONFIG["active"]:
        return False
    
    try:
        now = datetime.now(timezone.utc)
        start_date = datetime.fromisoformat(EVENT_CONFIG["start_date"]).replace(tzinfo=timezone.utc)
        end_date = datetime.fromisoformat(EVENT_CONFIG["end_date"]).replace(tzinfo=timezone.utc)
        
        return start_date <= now <= end_date
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        return False

def get_current_event_key():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    return EVENT_CONFIG["key"]

def get_available_rarities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    available_rarities = {}
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
    for rarity, data in RARITY_GROUPS.items():
        if is_event_active():
            available_rarities[rarity] = {
                "chance": data["adjusted_chance"],
                "emoji": data["emoji"],
                "cards": data["cards"]
            }
        else:
            available_rarities[rarity] = {
                "chance": data["base_chance"],
                "emoji": data["emoji"],
                "cards": data["cards"]
            }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    if is_event_active():
        event_key = get_current_event_key()
        if event_key in EVENT_CARDS:
            available_rarities[event_key] = EVENT_CARDS[event_key]
    
    return available_rarities

def get_random_card():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    available_rarities = get_available_rarities()
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—ã–ø–∞–¥–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    if is_event_active():
        event_chance = EVENT_CONFIG["chance"]
        if random.random() * 100 < event_chance:
            # –í—ã–ø–∞–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
            event_key = get_current_event_key()
            if event_key in EVENT_CARDS:
                event_cards = EVENT_CARDS[event_key]["cards"]
                card = random.choice(event_cards)
                card["rarity"] = event_key
                card["emoji"] = EVENT_CARDS[event_key]["emoji"]
                card["rarity_chance"] = EVENT_CARDS[event_key]["chance"]
                return card
    
    # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ –Ω–µ –≤—ã–ø–∞–ª–∞ —Å–æ–±—ã—Ç–∏–π–Ω–∞—è –∫–∞—Ä—Ç–∞, –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π
    roll = random.random() * 100
    current = 0
    
    selected_rarity = None
    for rarity, data in available_rarities.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–π–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
        if is_event_active() and rarity == get_current_event_key():
            continue
        current += data["chance"]
        if roll <= current:
            selected_rarity = rarity
            break
    
    if selected_rarity is None:
        available_without_event = {k: v for k, v in available_rarities.items() 
                                 if not (is_event_active() and k == get_current_event_key())}
        selected_rarity = list(available_without_event.keys())[0]
    
    cards_in_rarity = available_rarities[selected_rarity]["cards"]
    card = random.choice(cards_in_rarity)
    
    card["rarity"] = selected_rarity
    card["emoji"] = available_rarities[selected_rarity]["emoji"]
    card["rarity_chance"] = available_rarities[selected_rarity]["chance"]
    
    return card

def get_card_by_id(card_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID"""
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    for rarity_group in RARITY_GROUPS.values():
        for card in rarity_group["cards"]:
            if card["id"] == card_id:
                card["rarity"] = next(r for r, rg in RARITY_GROUPS.items() if card in rg["cards"])
                card["emoji"] = RARITY_GROUPS[card["rarity"]]["emoji"]
                return card
    
    # –ó–∞—Ç–µ–º –∏—â–µ–º –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö —Å–æ–±—ã—Ç–∏—è
    for event_key, event_data in EVENT_CARDS.items():
        for card in event_data["cards"]:
            if card["id"] == card_id:
                card["rarity"] = event_key
                card["emoji"] = event_data["emoji"]
                return card
    
    return None

def get_random_card_by_rarity(target_rarity):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    available_rarities = get_available_rarities()
    
    if target_rarity not in available_rarities:
        return None
    
    cards_in_rarity = available_rarities[target_rarity]["cards"]
    card = random.choice(cards_in_rarity)
    
    card["rarity"] = target_rarity
    card["emoji"] = available_rarities[target_rarity]["emoji"]
    card["rarity_chance"] = available_rarities[target_rarity]["chance"]
    
    return card

def get_random_event_card(event_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è"""
    if event_name not in EVENT_CARDS:
        return None
    
    cards_in_event = EVENT_CARDS[event_name]["cards"]
    card = random.choice(cards_in_event)
    
    card["rarity"] = event_name
    card["emoji"] = EVENT_CARDS[event_name]["emoji"]
    card["rarity_chance"] = EVENT_CARDS[event_name]["chance"]
    
    return card

def add_card_to_user(user_id, card):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_data = load_user_data()
    
    if user_id not in user_data:
        user_data[user_id] = {
            "inventory": [], 
            "total_points": 0, 
            "last_used": None, 
            "used_promocodes": [],
            "daily_streak": 0,
            "last_daily": None,
            "profile_data": {"title": "–ù–æ–≤–∏—á–æ–∫", "frame": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "bio": ""}
        }
    
    user_data[user_id]["inventory"].append({
        "card_id": card["id"],
        "name": card["name"],
        "rarity": card["rarity"],
        "points": card["points"],
        "acquired": datetime.now(timezone.utc).isoformat(),
        "from_promo": True
    })
    
    user_data[user_id]["total_points"] += card["points"]
    save_user_data(user_data)
    
    logger.info(f"User {user_id} received card from promo: {card['name']}")

def get_user_card_stats(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = load_user_data()
    if user_id not in user_data:
        return {}
    
    inventory = user_data[user_id]["inventory"]
    card_stats = {}
    
    for card in inventory:
        card_id = card["card_id"]
        if card_id not in card_stats:
            original_card = get_card_by_id(card_id)
            if original_card:
                card_stats[card_id] = {
                    "name": original_card["name"],
                    "image": original_card["image"],
                    "rarity": original_card["rarity"],
                    "points": original_card["points"],
                    "emoji": original_card["emoji"],
                    "count": 1,
                    "total_points": original_card["points"]
                }
        else:
            card_stats[card_id]["count"] += 1
            card_stats[card_id]["total_points"] += card["points"]
    
    return card_stats

# ==================== –ö–†–ê–§–¢–ò–ù–ì ====================
async def show_craft_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫—Ä–∞—Ñ—Ç–∞"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id]["inventory"]:
        await update.message.reply_text("üì≠ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞! –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –∫—Ä–∞—Ñ—Ç–∞
    keyboard = []
    for recipe_name, recipe in CRAFT_RECIPES.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
        can_craft = True
        for ingredient in recipe["ingredients"]:
            user_cards = [card for card in user_data[user_id]["inventory"] if card["rarity"] == ingredient["rarity"]]
            if len(user_cards) < ingredient["count"]:
                can_craft = False
                break
        
        button_text = f"{recipe['description']}"
        if not can_craft:
            button_text += " ‚ùå"
        else:
            button_text += " ‚úÖ"
        
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"craft_{recipe_name}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="craft_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üõ†Ô∏è **–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –∫—Ä–∞—Ñ—Ç–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏:\n"
        "‚úÖ - –º–æ–∂–Ω–æ —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å\n"
        "‚ùå - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç\n\n"
        "–®–∞–Ω—Å—ã —É—Å–ø–µ—Ö–∞ —É–∫–∞–∑–∞–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_craft_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –∫—Ä–∞—Ñ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    action = query.data
    
    if action == "craft_back":
        await query.edit_message_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        return
    
    if action.startswith("craft_"):
        recipe_name = action.replace("craft_", "")
        await process_craft(query, context, user_id, recipe_name)

async def process_craft(query, context, user_id, recipe_name):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫—Ä–∞—Ñ—Ç–∞"""
    user_data = load_user_data()
    
    if recipe_name not in CRAFT_RECIPES:
        await query.edit_message_text("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    recipe = CRAFT_RECIPES[recipe_name]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç
    cards_to_remove = []
    for ingredient in recipe["ingredients"]:
        user_cards = [card for card in user_data[user_id]["inventory"] if card["rarity"] == ingredient["rarity"]]
        if len(user_cards) < ingredient["count"]:
            await query.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏ {ingredient['rarity']} –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞!")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ)
        cards_to_remove.extend(user_cards[:ingredient["count"]])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
    success = random.random() * 100 <= recipe["chance"]
    
    if success:
        # –£—Å–ø–µ—à–Ω—ã–π –∫—Ä–∞—Ñ—Ç - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ä—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        for card in cards_to_remove:
            user_data[user_id]["inventory"].remove(card)
            user_data[user_id]["total_points"] -= card["points"]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
        result_card = get_random_card_by_rarity(recipe["result"])
        if result_card:
            user_data[user_id]["inventory"].append({
                "card_id": result_card["id"],
                "name": result_card["name"],
                "rarity": result_card["rarity"],
                "points": result_card["points"],
                "acquired": datetime.now(timezone.utc).isoformat(),
                "from_craft": True
            })
            user_data[user_id]["total_points"] += result_card["points"]
            
            save_user_data(user_data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            caption = (
                f"üéâ **–ö—Ä–∞—Ñ—Ç —É—Å–ø–µ—à–µ–Ω!**\n\n"
                f"üõ†Ô∏è –í—ã —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏: {result_card['name']}\n"
                f"{result_card['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {result_card['rarity']}\n"
                f"‚≠ê **–û—á–∫–∏:** {result_card['points']}\n"
                f"üé≤ **–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞:** {recipe['chance']}%\n\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞—Ä—Ç: {len(cards_to_remove)}"
            )
            
            try:
                with open(result_card['image'], 'rb') as photo:
                    await query.message.reply_photo(photo=photo, caption=caption, parse_mode='Markdown')
            except FileNotFoundError:
                await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n{caption}", parse_mode='Markdown')
            
            await query.edit_message_text("üõ†Ô∏è –ö—Ä–∞—Ñ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã!")
    else:
        # –ù–µ—É–¥–∞—á–Ω—ã–π –∫—Ä–∞—Ñ—Ç - —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—ã –±–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã
        for card in cards_to_remove:
            user_data[user_id]["inventory"].remove(card)
            user_data[user_id]["total_points"] -= card["points"]
        
        save_user_data(user_data)
        
        await query.edit_message_text(
            f"üí• **–ö—Ä–∞—Ñ—Ç –Ω–µ —É–¥–∞–ª—Å—è!**\n\n"
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ä—Ç—ã –±—ã–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã.\n"
            f"–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞ –±—ã–ª: {recipe['chance']}%\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
            parse_mode='Markdown'
        )

# ==================== –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ù–ê–ì–†–ê–î–´ ====================
async def daily_reward(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data:
        user_data[user_id] = {
            "inventory": [], 
            "total_points": 0, 
            "last_used": None, 
            "used_promocodes": [],
            "daily_streak": 0,
            "last_daily": None,
            "profile_data": {"title": "–ù–æ–≤–∏—á–æ–∫", "frame": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "bio": ""}
        }
    
    now = datetime.now(timezone.utc)
    last_daily = user_data[user_id].get("last_daily")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É
    if last_daily:
        last_daily_date = datetime.fromisoformat(last_daily.replace('Z', '+00:00'))
        if last_daily_date.tzinfo is None:
            last_daily_date = last_daily_date.replace(tzinfo=timezone.utc)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ —É–∂–µ –¥–µ–Ω—å
        time_since_last_daily = now - last_daily_date
        if time_since_last_daily < timedelta(hours=20):
            next_daily = last_daily_date + timedelta(hours=20)
            time_left = next_daily - now
            
            hours = int(time_left.total_seconds() // 3600)
            minutes = int((time_left.total_seconds() % 3600) // 60)
            
            await update.message.reply_text(
                f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º\n"
                f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user_data[user_id].get('daily_streak', 0)} –¥–Ω–µ–π"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ª–∏ —Å–µ—Ä–∏—è
        if time_since_last_daily > timedelta(hours=44):  # 24 + 20 —á–∞—Å–æ–≤
            user_data[user_id]["daily_streak"] = 0
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é
    user_data[user_id]["daily_streak"] = user_data[user_id].get("daily_streak", 0) + 1
    streak = user_data[user_id]["daily_streak"]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–∞–≥—Ä–∞–¥—ã (—Ü–∏–∫–ª 7 –¥–Ω–µ–π)
    day = ((streak - 1) % 7) + 1
    reward_info = DAILY_REWARDS[day]
    
    # –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    reward_text = f"üéÅ **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ - –î–µ–Ω—å {day}**\n\n"
    reward_text += f"üìÖ –°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n\n"
    
    if reward_info["type"] == "points":
        points = reward_info["amount"]
        user_data[user_id]["total_points"] += points
        reward_text += f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {points} –æ—á–∫–æ–≤!\n"
        reward_text += f"üìù {reward_info['description']}"
    
    elif reward_info["type"] == "random_card":
        rarity = reward_info["rarity"]
        card = get_random_card_by_rarity(rarity)
        if card:
            user_data[user_id]["inventory"].append({
                "card_id": card["id"],
                "name": card["name"],
                "rarity": card["rarity"],
                "points": card["points"],
                "acquired": datetime.now(timezone.utc).isoformat(),
                "from_daily": True
            })
            user_data[user_id]["total_points"] += card["points"]
            
            reward_text += f"üé¥ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {card['name']}\n"
            reward_text += f"{card['emoji']} –†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}\n"
            reward_text += f"‚≠ê –û—á–∫–∏: {card['points']}\n"
            reward_text += f"üìù {reward_info['description']}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞—Ä—Ç—ã
            try:
                with open(card['image'], 'rb') as photo:
                    await update.message.reply_photo(photo=photo, caption=reward_text, parse_mode='Markdown')
            except FileNotFoundError:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n{reward_text}", parse_mode='Markdown')
        else:
            reward_text += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã!"
            await update.message.reply_text(reward_text, parse_mode='Markdown')
    
    elif reward_info["type"] == "special":
        # –°–£–ü–ï–† –ü–†–ò–ó - —Å–ª—É—á–∞–π–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞
        card = get_random_card_by_rarity("–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è")
        if card:
            user_data[user_id]["inventory"].append({
                "card_id": card["id"],
                "name": card["name"],
                "rarity": card["rarity"],
                "points": card["points"],
                "acquired": datetime.now(timezone.utc).isoformat(),
                "from_daily": True
            })
            user_data[user_id]["total_points"] += card["points"]
            
            reward_text += f"üéâ **–°–£–ü–ï–† –ü–†–ò–ó!** üéâ\n\n"
            reward_text += f"üé¥ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {card['name']}\n"
            reward_text += f"{card['emoji']} –†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}\n"
            reward_text += f"‚≠ê –û—á–∫–∏: {card['points']}\n"
            reward_text += f"üìù {reward_info['description']}"
            
            try:
                with open(card['image'], 'rb') as photo:
                    await update.message.reply_photo(photo=photo, caption=reward_text, parse_mode='Markdown')
            except FileNotFoundError:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n{reward_text}", parse_mode='Markdown')
        else:
            reward_text += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã!"
            await update.message.reply_text(reward_text, parse_mode='Markdown')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–≥—Ä–∞–¥—ã
    user_data[user_id]["last_daily"] = now.isoformat()
    save_user_data(user_data)
    
    if reward_info["type"] != "random_card" and reward_info["type"] != "special":
        await update.message.reply_text(reward_text, parse_mode='Markdown')

# ==================== –û–ë–ú–ï–ù –ö–ê–†–¢–û–ß–ö–ê–ú–ò ====================
async def start_trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏"""
    user_id = str(update.effective_user.id)
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "ü§ù **–û–±–º–µ–Ω –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/trade @username card_id1,card_id2...\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/trade @username 2.1,2.2,2.3\n\n"
            "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID –∫–∞—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /inventory"
        )
        return
    
    target_username = context.args[0].replace('@', '')
    card_ids = context.args[1].split(',')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_data = load_user_data()
    
    # –ù–∞—Ö–æ–¥–∏–º ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    target_user_id = None
    for uid, data in user_data.items():
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å username –∏–∑ Telegram API
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        if target_username.lower() in uid.lower():
            target_user_id = uid
            break
    
    if not target_user_id:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if target_user_id == user_id:
        await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_cards = []
    for card_id_str in card_ids:
        try:
            card_id = float(card_id_str)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ä—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_card = next((card for card in user_data[user_id]["inventory"] if card["card_id"] == card_id), None)
            if user_card:
                user_cards.append(user_card)
            else:
                await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç—ã —Å ID {card_id}!")
                return
        except ValueError:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ä—Ç—ã: {card_id_str}")
            return
    
    if not user_cards:
        await update.message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
    trade_id = create_trade(user_id, target_user_id, user_cards, [])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"trade_accept_{trade_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"trade_decline_{trade_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–±–º–µ–Ω–∞
    trade_text = f"ü§ù **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞**\n\n"
    trade_text += f"–û—Ç: {update.effective_user.first_name}\n"
    trade_text += f"–ö–æ–º—É: {target_username}\n\n"
    trade_text += "**–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∫–∞—Ä—Ç—ã:**\n"
    
    for card in user_cards:
        original_card = get_card_by_id(card["card_id"])
        if original_card:
            trade_text += f"‚Ä¢ {original_card['name']} ({original_card['rarity']}) - {original_card['points']} –æ—á–∫–æ–≤\n"
    
    trade_text += f"\nID –æ–±–º–µ–Ω–∞: {trade_id}"
    
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username}!\n"
        f"ID –æ–±–º–µ–Ω–∞: {trade_id}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=trade_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.")
        logger.error(f"Error sending trade offer: {e}")

async def handle_trade_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–±–º–µ–Ω–æ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    action = query.data
    
    if action.startswith("trade_accept_"):
        trade_id = int(action.replace("trade_accept_", ""))
        await accept_trade(query, context, user_id, trade_id)
    elif action.startswith("trade_decline_"):
        trade_id = int(action.replace("trade_decline_", ""))
        await decline_trade(query, context, trade_id)

async def accept_trade(query, context, user_id, trade_id):
    """–ü—Ä–∏–Ω—è—Ç—å –æ–±–º–µ–Ω"""
    trade = get_trade(trade_id)
    
    if not trade:
        await query.edit_message_text("‚ùå –û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if trade['user2_id'] != user_id:
        await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –æ–±–º–µ–Ω –Ω–µ –¥–ª—è –≤–∞—Å!")
        return
    
    if trade['status'] != 'pending':
        await query.edit_message_text("‚ùå –≠—Ç–æ—Ç –æ–±–º–µ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_data = load_user_data()
    user1_id = trade['user1_id']
    user2_id = trade['user2_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç—ã –≤—Å–µ –µ—â–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user1_cards = json.loads(trade['user1_cards'])
    user2_cards = json.loads(trade['user2_cards'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for card in user1_cards:
        if card not in user_data[user1_id]["inventory"]:
            await query.edit_message_text("‚ùå –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç!")
            return
    
    # –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏
    for card in user1_cards:
        user_data[user1_id]["inventory"].remove(card)
        user_data[user1_id]["total_points"] -= card["points"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_data[user2_id]["inventory"].append({
            "card_id": card["card_id"],
            "name": card["name"],
            "rarity": card["rarity"],
            "points": card["points"],
            "acquired": datetime.now(timezone.utc).isoformat(),
            "from_trade": True
        })
        user_data[user2_id]["total_points"] += card["points"]
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–º–µ–Ω–∏–≤–∞–µ–º –∏ –∏—Ö
    for card in user2_cards:
        user_data[user2_id]["inventory"].remove(card)
        user_data[user2_id]["total_points"] -= card["points"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø–µ—Ä–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_data[user1_id]["inventory"].append({
            "card_id": card["card_id"],
            "name": card["name"],
            "rarity": card["rarity"],
            "points": card["points"],
            "acquired": datetime.now(timezone.utc).isoformat(),
            "from_trade": True
        })
        user_data[user1_id]["total_points"] += card["points"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–º–µ–Ω–∞
    save_user_data(user_data)
    update_trade_status(trade_id, "completed")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await query.edit_message_text("‚úÖ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    try:
        await context.bot.send_message(
            chat_id=user1_id,
            text=f"‚úÖ –í–∞—à –æ–±–º–µ–Ω #{trade_id} –±—ã–ª –ø—Ä–∏–Ω—è—Ç –∏ –∑–∞–≤–µ—Ä—à–µ–Ω!"
        )
    except Exception as e:
        logger.error(f"Error notifying user about trade: {e}")

async def decline_trade(query, context, trade_id):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω"""
    trade = get_trade(trade_id)
    
    if not trade:
        await query.edit_message_text("‚ùå –û–±–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    update_trade_status(trade_id, "declined")
    
    await query.edit_message_text("‚ùå –û–±–º–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user1_id = trade['user1_id']
        await context.bot.send_message(
            chat_id=user1_id,
            text=f"‚ùå –í–∞—à –æ–±–º–µ–Ω #{trade_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω."
        )
    except Exception as e:
        logger.error(f"Error notifying user about declined trade: {e}")

# ==================== –ú–ò–ù–ò-–ò–ì–†–´ ====================
async def show_minigames(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä"""
    keyboard = [
        [InlineKeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∞", callback_data="minigame_roulette")],
        [InlineKeyboardButton("üéØ –£–≥–∞–¥–∞–π —Ä–µ–¥–∫–æ—Å—Ç—å", callback_data="minigame_guess")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="minigame_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéÆ **–ú–∏–Ω–∏-–∏–≥—Ä—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n"
        "‚Ä¢ üé∞ **–†—É–ª–µ—Ç–∫–∞** - —Ä–∏—Å–∫–Ω–∏—Ç–µ –∫–∞—Ä—Ç–æ–π –¥–ª—è —à–∞–Ω—Å–∞ –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à—É—é\n"
        "‚Ä¢ üéØ **–£–≥–∞–¥–∞–π —Ä–µ–¥–∫–æ—Å—Ç—å** - —É–≥–∞–¥–∞–π—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è –æ—á–∫–æ–≤\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_minigame_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω–∏-–∏–≥—Ä—ã"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    if action == "minigame_back":
        await query.edit_message_text("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        return
    elif action == "minigame_roulette":
        await start_roulette(query, context)
    elif action == "minigame_guess":
        await start_guess_rarity(query, context)

async def start_roulette(query, context):
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ —Ä—É–ª–µ—Ç–∫—É"""
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id]["inventory"]:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    user_cards = user_data[user_id]["inventory"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–∞–º–∏
    keyboard = []
    for card in user_cards[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑ 10 –∫–∞—Ä—Ç
        original_card = get_card_by_id(card["card_id"])
        if original_card:
            button_text = f"{original_card['emoji']} {original_card['name']} ({card['points']} –æ—á–∫–æ–≤)"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"roulette_{card['card_id']}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="minigame_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üé∞ **–†—É–ª–µ—Ç–∫–∞**\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —Ä–∏—Å–∫–∞\n"
        "‚Ä¢ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: 40%\n"
        "‚Ä¢ –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ: –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç—É –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏\n"
        "‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ: —Ç–µ—Ä—è–µ—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É\n\n"
        "**–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –∏–≥—Ä—ã:**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_roulette_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    action = query.data
    
    if action == "minigame_back":
        await query.edit_message_text("üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã")
        return
    
    if action.startswith("roulette_"):
        card_id = float(action.replace("roulette_", ""))
        await play_roulette(query, context, user_id, card_id)

async def play_roulette(query, context, user_id, card_id):
    """–ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É"""
    user_data = load_user_data()
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
    user_card = next((card for card in user_data[user_id]["inventory"] if card["card_id"] == card_id), None)
    if not user_card:
        await query.edit_message_text("‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    original_card = get_card_by_id(card_id)
    if not original_card:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ!")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞
    win_chance = MINIGAME_CONFIG["roulette"]["win_chance"]
    win = random.random() * 100 <= win_chance
    
    if win:
        # –í–´–ò–ì–†–´–® - –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
        rarity_order = ["–†–µ–¥–∫–∞—è", "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è", "–≠–ø–∏—á–µ—Å–∫–∞—è", "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", "–°–µ–∫—Ä–µ—Ç–Ω–∞—è", "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è"]
        current_rarity_index = rarity_order.index(original_card["rarity"])
        
        if current_rarity_index < len(rarity_order) - 1:
            next_rarity = rarity_order[current_rarity_index + 1]
            new_card = get_random_card_by_rarity(next_rarity)
            
            if new_card:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç—É
                user_data[user_id]["inventory"].remove(user_card)
                user_data[user_id]["total_points"] -= user_card["points"]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
                user_data[user_id]["inventory"].append({
                    "card_id": new_card["id"],
                    "name": new_card["name"],
                    "rarity": new_card["rarity"],
                    "points": new_card["points"],
                    "acquired": datetime.now(timezone.utc).isoformat(),
                    "from_roulette": True
                })
                user_data[user_id]["total_points"] += new_card["points"]
                
                save_user_data(user_data)
                
                result_text = (
                    f"üéâ **–í–´ –í–´–ò–ì–†–ê–õ–ò!** üéâ\n\n"
                    f"–í—ã —Ä–∏—Å–∫–Ω—É–ª–∏: {original_card['name']}\n"
                    f"–ò –ø–æ–ª—É—á–∏–ª–∏: {new_card['name']}\n"
                    f"üìà –£–ª—É—á—à–µ–Ω–∏–µ: {original_card['rarity']} ‚Üí {new_card['rarity']}\n"
                    f"‚≠ê –ù–æ–≤—ã–µ –æ—á–∫–∏: {new_card['points']}\n"
                    f"üé≤ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: {win_chance}%"
                )
                
                try:
                    with open(new_card['image'], 'rb') as photo:
                        await query.message.reply_photo(photo=photo, caption=result_text, parse_mode='Markdown')
                except FileNotFoundError:
                    await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n{result_text}", parse_mode='Markdown')
                
                await query.edit_message_text("üé∞ –†—É–ª–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã!")
        else:
            await query.edit_message_text("üéâ –£ –≤–∞—Å —É–∂–µ —Å–∞–º–∞—è —Ä–µ–¥–∫–∞—è –∫–∞—Ä—Ç–∞! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏!")
            user_data[user_id]["total_points"] += original_card["points"] * 2
            save_user_data(user_data)
    
    else:
        # –ü–†–û–ò–ì–†–´–® - —Ç–µ—Ä—è–µ–º –∫–∞—Ä—Ç—É
        user_data[user_id]["inventory"].remove(user_card)
        user_data[user_id]["total_points"] -= user_card["points"]
        save_user_data(user_data)
        
        await query.edit_message_text(
            f"üí• **–í–´ –ü–†–û–ò–ì–†–ê–õ–ò!** üí•\n\n"
            f"–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏: {original_card['name']}\n"
            f"–†–µ–¥–∫–æ—Å—Ç—å: {original_card['rarity']}\n"
            f"–ü–æ—Ç–µ—Ä—è–Ω–æ –æ—á–∫–æ–≤: {original_card['points']}\n"
            f"üé≤ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ –±—ã–ª: {win_chance}%\n\n"
            f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
            parse_mode='Markdown'
        )

async def start_guess_rarity(query, context):
    """–ù–∞—á–∞—Ç—å –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —Ä–µ–¥–∫–æ—Å—Ç—å'"""
    user_id = str(query.from_user.id)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
    card = get_random_card()
    if not card:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["guess_card"] = card
    context.user_data["guess_start_time"] = datetime.now(timezone.utc)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ä–µ–¥–∫–æ—Å—Ç–µ–π
    keyboard = []
    rarities = list(RARITY_GROUPS.keys()) + list(EVENT_CARDS.keys())
    
    for rarity in rarities[:6]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 6 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        emoji = RARITY_GROUPS.get(rarity, {}).get("emoji") or EVENT_CARDS.get(rarity, {}).get("emoji", "‚ùì")
        keyboard.append([InlineKeyboardButton(f"{emoji} {rarity}", callback_data=f"guess_{rarity}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É (–±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–¥–∫–æ—Å—Ç–∏)
    try:
        with open(card['image'], 'rb') as photo:
            caption = "üéØ **–£–≥–∞–¥–∞–π —Ä–µ–¥–∫–æ—Å—Ç—å!**\n\n–ö–∞–∫–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ —ç—Ç–∞ –∫–∞—Ä—Ç–∞?\n–£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥!"
            await query.message.reply_photo(photo=photo, caption=caption, reply_markup=reply_markup, parse_mode='Markdown')
    except FileNotFoundError:
        await query.message.reply_text(
            f"üéØ **–£–≥–∞–¥–∞–π —Ä–µ–¥–∫–æ—Å—Ç—å!**\n\n"
            f"–ö–∞—Ä—Ç–∞: {card['name']}\n"
            f"–ö–∞–∫–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ —ç—Ç–∞ –∫–∞—Ä—Ç–∞?\n\n"
            f"–£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    await query.edit_message_text("üéØ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –°–º–æ—Ç—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def handle_guess_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    action = query.data
    
    if not action.startswith("guess_"):
        return
    
    guessed_rarity = action.replace("guess_", "")
    card = context.user_data.get("guess_card")
    start_time = context.user_data.get("guess_start_time")
    
    if not card or not start_time:
        await query.edit_message_text("‚ùå –í—Ä–µ–º—è –≤—ã—à–ª–æ –∏–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    time_elapsed = (datetime.now(timezone.utc) - start_time).total_seconds()
    if time_elapsed > MINIGAME_CONFIG["guess_rarity"]["time_limit"]:
        await query.edit_message_text("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if guessed_rarity == card["rarity"]:
        # –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢ - –Ω–∞–≥—Ä–∞–¥–∞
        user_data = load_user_data()
        if user_id not in user_data:
            user_data[user_id] = {
                "inventory": [], 
                "total_points": 0, 
                "last_used": None, 
                "used_promocodes": [],
                "daily_streak": 0,
                "last_daily": None,
                "profile_data": {"title": "–ù–æ–≤–∏—á–æ–∫", "frame": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "bio": ""}
            }
        
        reward_points = card["points"] * MINIGAME_CONFIG["guess_rarity"]["reward_multiplier"]
        user_data[user_id]["total_points"] += reward_points
        save_user_data(user_data)
        
        result_text = (
            f"üéâ **–ü–†–ê–í–ò–õ–¨–ù–û!** üéâ\n\n"
            f"–ö–∞—Ä—Ç–∞: {card['name']}\n"
            f"–†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']} {card['emoji']}\n"
            f"‚≠ê –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {reward_points} –æ—á–∫–æ–≤!\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {time_elapsed:.1f} —Å–µ–∫."
        )
    else:
        # –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–í–ï–¢
        result_text = (
            f"‚ùå **–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û!**\n\n"
            f"–ö–∞—Ä—Ç–∞: {card['name']}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: {card['rarity']} {card['emoji']}\n"
            f"–í–∞—à –æ—Ç–≤–µ—Ç: {guessed_rarity}\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {time_elapsed:.1f} —Å–µ–∫.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    try:
        with open(card['image'], 'rb') as photo:
            full_caption = (
                f"üé¥ {card['name']}\n"
                f"{card['emoji']} –†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}\n"
                f"‚≠ê –û—á–∫–∏: {card['points']}\n\n"
                f"{result_text}"
            )
            await query.message.reply_photo(photo=photo, caption=full_caption, parse_mode='Markdown')
    except FileNotFoundError:
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n{result_text}", parse_mode='Markdown')
    
    await query.edit_message_text("üéØ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
    context.user_data.pop("guess_card", None)
    context.user_data.pop("guess_start_time", None)

# ==================== –ö–ê–°–¢–û–ú–ù–´–ï –ü–†–û–§–ò–õ–ò ====================
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.effective_user.id)
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username, –∏—â–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_id = user_id
    if context.args:
        username = context.args[0].replace('@', '')
        user_data = load_user_data()
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å user_id –ø–æ username –∏–∑ Telegram API
        # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for uid, data in user_data.items():
            if username.lower() in uid.lower():
                target_user_id = uid
                break
    
    user_data = load_user_data()
    
    if target_user_id not in user_data:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    user_info = user_data[target_user_id]
    profile_data = user_info.get("profile_data", {"title": "–ù–æ–≤–∏—á–æ–∫", "frame": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "bio": ""})
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_cards = len(user_info["inventory"])
    total_points = user_info["total_points"]
    daily_streak = user_info.get("daily_streak", 0)
    
    # –°—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    rarity_count = {}
    for card in user_info["inventory"]:
        rarity = card["rarity"]
        rarity_count[rarity] = rarity_count.get(rarity, 0) + 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    title = profile_data.get("title", "–ù–æ–≤–∏—á–æ–∫")
    frame = profile_data.get("frame", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è")
    bio = profile_data.get("bio", "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
    
    title_emoji = PROFILE_TITLES.get(title, {}).get("emoji", "üë§")
    frame_color = PROFILE_FRAMES.get(frame, {}).get("color", "‚ö™")
    
    profile_text = (
        f"{frame_color}‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        f"{frame_color}‚îÉ      **–ü–†–û–§–ò–õ–¨**      ‚îÉ\n"
        f"{frame_color}‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´\n"
        f"{frame_color}‚îÉ {title_emoji} **{title}**\n"
        f"{frame_color}‚îÉ üí¨ {bio}\n"
        f"{frame_color}‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´\n"
        f"{frame_color}‚îÉ üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"{frame_color}‚îÉ üìö –ö–∞—Ä—Ç–æ—á–µ–∫: {total_cards}\n"
        f"{frame_color}‚îÉ ‚≠ê –û—á–∫–æ–≤: {total_points}\n"
        f"{frame_color}‚îÉ üî• –°–µ—Ä–∏—è: {daily_streak} –¥–Ω–µ–π\n"
        f"{frame_color}‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´\n"
        f"{frame_color}‚îÉ üé¥ **–ö–æ–ª–ª–µ–∫—Ü–∏—è:**\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    for rarity in RARITY_GROUPS:
        if rarity in rarity_count:
            emoji = RARITY_GROUPS[rarity]["emoji"]
            profile_text += f"{frame_color}‚îÉ {emoji} {rarity}: {rarity_count[rarity]}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–æ–±—ã—Ç–∏—è–º
    for event_config in EVENTS_CONFIG.values():
        event_key = event_config["key"]
        if event_key in rarity_count:
            emoji = event_config["emoji"]
            profile_text += f"{frame_color}‚îÉ {emoji} {event_key}: {rarity_count[event_key]}\n"
    
    profile_text += f"{frame_color}‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è)
    keyboard = []
    if target_user_id == user_id:
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ", callback_data="profile_edit_bio")],
            [InlineKeyboardButton("üéñÔ∏è –í—ã–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª", callback_data="profile_select_title")],
            [InlineKeyboardButton("üñºÔ∏è –í—ã–±—Ä–∞—Ç—å —Ä–∞–º–∫—É", callback_data="profile_select_frame")],
            [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="profile_close")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    await update.message.reply_text(profile_text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ—Ñ–∏–ª–µ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    action = query.data
    
    if action == "profile_close":
        await query.edit_message_text("üë§ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç")
        return
    elif action == "profile_edit_bio":
        await query.edit_message_text(
            "‚úèÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∏–æ**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        context.user_data["awaiting_bio"] = True
        return
    elif action == "profile_select_title":
        await show_title_selection(query, context)
    elif action == "profile_select_frame":
        await show_frame_selection(query, context)
    elif action.startswith("profile_set_title_"):
        title = action.replace("profile_set_title_", "")
        await set_profile_title(query, context, user_id, title)
    elif action.startswith("profile_set_frame_"):
        frame = action.replace("profile_set_frame_", "")
        await set_profile_frame(query, context, user_id, frame)

async def show_title_selection(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏—Ç—É–ª–æ–≤"""
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    user_info = user_data[user_id]
    current_title = user_info.get("profile_data", {}).get("title", "–ù–æ–≤–∏—á–æ–∫")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∏—Ç—É–ª–∞–º–∏
    keyboard = []
    for title, title_info in PROFILE_TITLES.items():
        emoji = title_info["emoji"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ç–∏—Ç—É–ª
        available = check_title_availability(user_info, title_info["requirement"])
        
        if available:
            button_text = f"{emoji} {title}"
            if title == current_title:
                button_text += " ‚úÖ"
        else:
            button_text = f"{emoji} {title} üîí"
        
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"profile_set_title_{title}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üéñÔ∏è **–í—ã–±–æ—Ä —Ç–∏—Ç—É–ª–∞**\n\n"
        "‚úÖ - —Ç–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª\n"
        "üîí - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ç—É–ª:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_frame_selection(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–∞–º–æ–∫"""
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    user_info = user_data[user_id]
    current_frame = user_info.get("profile_data", {}).get("frame", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏
    keyboard = []
    for frame, frame_info in PROFILE_FRAMES.items():
        color = frame_info["color"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Ä–∞–º–∫–∞
        available = check_frame_availability(user_info, frame_info["requirement"])
        
        if available:
            button_text = f"{color} {frame}"
            if frame == current_frame:
                button_text += " ‚úÖ"
        else:
            button_text = f"{color} {frame} üîí"
        
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"profile_set_frame_{frame}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üñºÔ∏è **–í—ã–±–æ—Ä —Ä–∞–º–∫–∏**\n\n"
        "‚úÖ - —Ç–µ–∫—É—â–∞—è —Ä–∞–º–∫–∞\n"
        "üîí - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–º–∫—É:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def check_title_availability(user_info, requirement):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∏—Ç—É–ª–∞"""
    total_cards = len(user_info["inventory"])
    total_points = user_info["total_points"]
    
    if requirement == "default":
        return True
    elif requirement == "total_cards_50":
        return total_cards >= 50
    elif requirement == "total_cards_100":
        return total_cards >= 100
    elif requirement == "total_cards_200":
        return total_cards >= 200
    elif requirement == "total_cards_500":
        return total_cards >= 500
    elif requirement == "total_points_100000":
        return total_points >= 100000
    elif requirement == "all_rare_cards":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã —Ä–µ–¥–∫–æ—Å—Ç–∏ "–†–µ–¥–∫–∞—è"
        rare_cards = [card for card in user_info["inventory"] if card["rarity"] == "–†–µ–¥–∫–∞—è"]
        return len(rare_cards) >= len(RARITY_GROUPS["–†–µ–¥–∫–∞—è"]["cards"])
    elif requirement == "all_event_cards":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã –∏–∑ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
        event_cards_found = 0
        for event_key in EVENT_CARDS:
            if any(card["rarity"] == event_key for card in user_info["inventory"]):
                event_cards_found += 1
        return event_cards_found >= len(EVENT_CARDS)
    
    return False

def check_frame_availability(user_info, requirement):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–º–∫–∏"""
    total_cards = len(user_info["inventory"])
    total_points = user_info["total_points"]
    
    if requirement == "default":
        return True
    elif requirement == "total_points_50000":
        return total_points >= 50000
    elif requirement == "total_points_200000":
        return total_points >= 200000
    elif requirement == "total_cards_300":
        return total_cards >= 300
    elif requirement == "all_rarity_cards":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –∫–∞–∂–¥–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
        rarities_found = set(card["rarity"] for card in user_info["inventory"])
        return len(rarities_found) >= len(RARITY_GROUPS)
    elif requirement == "special_achievement":
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ - –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        event_cards_found = 0
        for event_key in EVENT_CARDS:
            if any(card["rarity"] == event_key for card in user_info["inventory"]):
                event_cards_found += 1
        return event_cards_found >= len(EVENT_CARDS)
    
    return False

async def set_profile_title(query, context, user_id, title):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏—Ç—É–ª –ø—Ä–æ—Ñ–∏–ª—è"""
    user_data = load_user_data()
    
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∏—Ç—É–ª–∞
    title_info = PROFILE_TITLES.get(title)
    if not title_info:
        await query.edit_message_text("‚ùå –¢–∏—Ç—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if not check_title_availability(user_data[user_id], title_info["requirement"]):
        await query.edit_message_text("‚ùå –≠—Ç–æ—Ç —Ç–∏—Ç—É–ª –≤–∞–º –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏—Ç—É–ª
    if "profile_data" not in user_data[user_id]:
        user_data[user_id]["profile_data"] = {}
    
    user_data[user_id]["profile_data"]["title"] = title
    save_user_data(user_data)
    
    await query.edit_message_text(f"‚úÖ –¢–∏—Ç—É–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {title_info['emoji']} {title}")

async def set_profile_frame(query, context, user_id, frame):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–º–∫—É –ø—Ä–æ—Ñ–∏–ª—è"""
    user_data = load_user_data()
    
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞–º–∫–∏
    frame_info = PROFILE_FRAMES.get(frame)
    if not frame_info:
        await query.edit_message_text("‚ùå –†–∞–º–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    if not check_frame_availability(user_data[user_id], frame_info["requirement"]):
        await query.edit_message_text("‚ùå –≠—Ç–∞ —Ä–∞–º–∫–∞ –≤–∞–º –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–º–∫—É
    if "profile_data" not in user_data[user_id]:
        user_data[user_id]["profile_data"] = {}
    
    user_data[user_id]["profile_data"]["frame"] = frame
    save_user_data(user_data)
    
    await query.edit_message_text(f"‚úÖ –†–∞–º–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {frame_info['color']} {frame}")

async def handle_bio_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±–∏–æ"""
    user_id = str(update.effective_user.id)
    
    if not context.user_data.get("awaiting_bio"):
        return
    
    bio_text = update.message.text
    
    if bio_text.startswith('/'):
        if bio_text == '/cancel':
            await update.message.reply_text("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∏–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            context.user_data["awaiting_bio"] = False
            return
        return
    
    if len(bio_text) > 100:
        await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–æ
    user_data = load_user_data()
    
    if user_id not in user_data:
        user_data[user_id] = {
            "inventory": [], 
            "total_points": 0, 
            "last_used": None, 
            "used_promocodes": [],
            "daily_streak": 0,
            "last_daily": None,
            "profile_data": {"title": "–ù–æ–≤–∏—á–æ–∫", "frame": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "bio": ""}
        }
    
    if "profile_data" not in user_data[user_id]:
        user_data[user_id]["profile_data"] = {}
    
    user_data[user_id]["profile_data"]["bio"] = bio_text
    save_user_data(user_data)
    
    await update.message.reply_text("‚úÖ –ë–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    context.user_data["awaiting_bio"] = False

# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    available_rarities = get_available_rarities()
    
    rarity_info = "üé≤ **–®–∞–Ω—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–µ–π:**\n"
    for rarity, data in available_rarities.items():
        emoji = data["emoji"]
        chance = data["chance"]
        card_count = len(data["cards"])
        rarity_info += f"{emoji} {rarity}: {chance}% ({card_count} –∫–∞—Ä—Ç–æ—á–µ–∫)\n"
    
    event_info = ""
    if is_event_active():
        event_key = get_current_event_key()
        event_cards_count = len(EVENT_CARDS[event_key]["cards"]) if event_key in EVENT_CARDS else 0
        event_info = f"\nüéâ **–ê–ö–¢–ò–í–ù–û–ï –°–û–ë–´–¢–ò–ï: {EVENT_CONFIG['name']} {EVENT_CONFIG['emoji']}**\n"
        event_info += f"üìÖ –î–æ: {EVENT_CONFIG['end_date']}\n"
        event_info += f"üé¥ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {event_cards_count} —à—Ç.\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton("üé¥ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="get_card_main")],
        [InlineKeyboardButton("üìö –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory_main")],
        [InlineKeyboardButton("üõ†Ô∏è –ö—Ä–∞—Ñ—Ç", callback_data="craft_main"), InlineKeyboardButton("üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã", callback_data="minigames_main")],
        [InlineKeyboardButton("ü§ù –û–±–º–µ–Ω", callback_data="trade_main"), InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile_main")],
        [InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞", callback_data="daily_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üé¥ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫!**\n\n"
        f"{event_info}"
        "üìñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/getcard - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "/inventory - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
        "/craft - –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –∫—Ä–∞—Ñ—Ç–∞\n"
        "/daily - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞\n"
        "/trade - –û–±–º–µ–Ω –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏\n"
        "/minigames - –ú–∏–Ω–∏-–∏–≥—Ä—ã\n"
        "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/promo <–∫–æ–¥> - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "/event - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏\n\n"
        f"‚è∞ **–ö—É–ª–¥–∞—É–Ω:** {COOLDOWN_MINUTES} –º–∏–Ω—É—Ç\n\n"
        f"{rarity_info}",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_main_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    action = query.data
    
    if action == "get_card_main":
        await get_card_from_callback(query, context)
    elif action == "inventory_main":
        await show_inventory_from_callback(query, context)
    elif action == "craft_main":
        await show_craft_menu_from_callback(query, context)
    elif action == "minigames_main":
        await show_minigames_from_callback(query, context)
    elif action == "trade_main":
        await start_trade_from_callback(query, context)
    elif action == "profile_main":
        await show_profile_from_callback(query, context)
    elif action == "daily_main":
        await daily_reward_from_callback(query, context)

async def get_card_from_callback(query, context):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ callback"""
    user_id = str(query.from_user.id)
    user_data = load_user_data()

    last_used = user_data.get(user_id, {}).get('last_used')
    if last_used:
        if last_used.endswith('Z'):
            last_time = datetime.fromisoformat(last_used.replace('Z', '+00:00'))
        else:
            last_time = datetime.fromisoformat(last_used)
        
        current_time = datetime.now(timezone.utc)
        
        if last_time.tzinfo is None:
            last_time = last_time.replace(tzinfo=timezone.utc)
        
        time_passed = current_time - last_time
        cooldown_duration = timedelta(minutes=COOLDOWN_MINUTES)
        
        if time_passed < cooldown_duration:
            remaining_time = cooldown_duration - time_passed
            total_seconds = int(remaining_time.total_seconds())
            
            hours = total_seconds // 3600
            minutes = (total_seconds % 3600) // 60
            seconds = total_seconds % 60
            
            if hours > 0:
                time_message = f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
            elif minutes > 0:
                time_message = f"{minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
            else:
                time_message = f"{seconds} —Å–µ–∫—É–Ω–¥"
                
            await query.message.reply_text(
                f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {time_message}"
            )
            await query.edit_message_text("üé¥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã")
            return

    card = get_random_card()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–±—ã—Ç–∏—è
    event_notice = ""
    if is_event_active() and card["rarity"] == get_current_event_key():
        event_notice = f"\nüéâ **–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–ê–Ø –ö–ê–†–¢–û–ß–ö–ê –°–û–ë–´–¢–ò–Ø {EVENT_CONFIG['name']}!**"
    
    caption = (
        f"üé¥ **–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É:** {card['name']}\n"
        f"{card['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {card['rarity']}\n"
        f"‚≠ê **–û—á–∫–∏:** {card['points']}\n"
        f"üé≤ –®–∞–Ω—Å —Ä–µ–¥–∫–æ—Å—Ç–∏: {card['rarity_chance']}%"
        f"{event_notice}"
    )

    try:
        with open(card['image'], 'rb') as photo:
            await query.message.reply_photo(photo=photo, caption=caption, parse_mode='Markdown')
    except FileNotFoundError:
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {card['image']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if user_id not in user_data:
        user_data[user_id] = {
            "inventory": [], 
            "total_points": 0, 
            "last_used": None, 
            "used_promocodes": [],
            "daily_streak": 0,
            "last_daily": None,
            "profile_data": {"title": "–ù–æ–≤–∏—á–æ–∫", "frame": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "bio": ""}
        }
    
    user_data[user_id]["inventory"].append({
        "card_id": card["id"],
        "name": card["name"],
        "rarity": card["rarity"],
        "points": card["points"],
        "acquired": datetime.now(timezone.utc).isoformat()
    })
    
    user_data[user_id]["total_points"] += card["points"]
    user_data[user_id]['last_used'] = datetime.now(timezone.utc).isoformat()
    save_user_data(user_data)
    
    logger.info(f"User {user_id} received card: {card['name']} (rarity: {card['rarity']})")
    await query.edit_message_text("üé¥ –ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!")

async def show_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id]["inventory"]:
        await update.message.reply_text("üì≠ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getcard —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.")
        return
    
    inventory = user_data[user_id]["inventory"]
    total_points = user_data[user_id]["total_points"]
    
    # –°—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    rarity_count = {}
    for card in inventory:
        rarity = card["rarity"]
        rarity_count[rarity] = rarity_count.get(rarity, 0) + 1
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–¥–∫–æ—Å—Ç—è–º–∏
    keyboard = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
    for rarity in RARITY_GROUPS:
        if rarity in rarity_count and rarity_count[rarity] > 0:
            emoji = RARITY_GROUPS[rarity]["emoji"]
            count = rarity_count[rarity]
            keyboard.append([InlineKeyboardButton(f"{emoji} {rarity} ({count})", callback_data=f"rarity_{rarity}")])
    
    # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π (–≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    for event_config in EVENTS_CONFIG.values():
        event_key = event_config["key"]
        if event_key in rarity_count and rarity_count[event_key] > 0:
            emoji = event_config["emoji"]
            count = rarity_count[event_key]
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è (–∞–∫—Ç–∏–≤–Ω–æ/–∑–∞–≤–µ—Ä—à–µ–Ω–æ)
            event_active = event_config["active"] and is_event_active() and event_config["key"] == get_current_event_key()
            event_status = " üîö" if not event_active else " üéâ"
            keyboard.append([InlineKeyboardButton(f"{emoji} {event_key} ({count}){event_status}", callback_data=f"rarity_{event_key}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö
    event_info = ""
    for event_config in EVENTS_CONFIG.values():
        event_key = event_config["key"]
        if event_key in rarity_count:
            event_active = event_config["active"] and is_event_active() and event_config["key"] == get_current_event_key()
            event_status = "–∑–∞–≤–µ—Ä—à–µ–Ω–æ" if not event_active else "–∞–∫—Ç–∏–≤–Ω–æ"
            event_info += f"\n{event_config['emoji']} –ö–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–±—ã—Ç–∏—è {event_key}: {rarity_count[event_key]} —à—Ç. ({event_status})"
    
    stats_text = (
        f"üìä **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:**\n"
        f"üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(inventory)}\n"
        f"‚≠ê –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {total_points}"
        f"{event_info}\n\n"
        f"üé≤ **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:**"
    )
    
    await update.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_inventory_from_callback(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ callback"""
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id]["inventory"]:
        await query.edit_message_text("üì≠ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getcard —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.")
        return
    
    inventory = user_data[user_id]["inventory"]
    total_points = user_data[user_id]["total_points"]
    
    rarity_count = {}
    for card in inventory:
        rarity = card["rarity"]
        rarity_count[rarity] = rarity_count.get(rarity, 0) + 1
    
    keyboard = []
    
    for rarity in RARITY_GROUPS:
        if rarity in rarity_count and rarity_count[rarity] > 0:
            emoji = RARITY_GROUPS[rarity]["emoji"]
            count = rarity_count[rarity]
            keyboard.append([InlineKeyboardButton(f"{emoji} {rarity} ({count})", callback_data=f"rarity_{rarity}")])
    
    for event_config in EVENTS_CONFIG.values():
        event_key = event_config["key"]
        if event_key in rarity_count and rarity_count[event_key] > 0:
            emoji = event_config["emoji"]
            count = rarity_count[event_key]
            event_active = event_config["active"] and is_event_active() and event_config["key"] == get_current_event_key()
            event_status = " üîö" if not event_active else " üéâ"
            keyboard.append([InlineKeyboardButton(f"{emoji} {event_key} ({count}){event_status}", callback_data=f"rarity_{event_key}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    event_info = ""
    for event_config in EVENTS_CONFIG.values():
        event_key = event_config["key"]
        if event_key in rarity_count:
            event_active = event_config["active"] and is_event_active() and event_config["key"] == get_current_event_key()
            event_status = "–∑–∞–≤–µ—Ä—à–µ–Ω–æ" if not event_active else "–∞–∫—Ç–∏–≤–Ω–æ"
            event_info += f"\n{event_config['emoji']} –ö–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–±—ã—Ç–∏—è {event_key}: {rarity_count[event_key]} —à—Ç. ({event_status})"
    
    stats_text = (
        f"üìä **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:**\n"
        f"üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(inventory)}\n"
        f"‚≠ê –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {total_points}"
        f"{event_info}\n\n"
        f"üé≤ **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:**"
    )
    
    await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_rarity_cards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    rarity = query.data.replace('rarity_', '')
    
    user_data = load_user_data()
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarity_cards = [card for card in user_data[user_id]["inventory"] if card["rarity"] == rarity]
    
    if not rarity_cards:
        await query.edit_message_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–¥–∫–æ—Å—Ç–∏ {rarity}!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    await show_card_navigation(query, context, rarity, 0)

async def show_card_navigation(query, context, rarity, index):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º"""
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    rarity_cards = [card for card in user_data[user_id]["inventory"] if card["rarity"] == rarity]
    
    if index >= len(rarity_cards):
        index = 0
    
    card = rarity_cards[index]
    original_card = get_card_by_id(card["card_id"])
    
    if not original_card:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    
    if len(rarity_cards) > 1:
        nav_buttons = []
        if index > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"nav_{rarity}_{index-1}"))
        if index < len(rarity_cards) - 1:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"nav_{rarity}_{index+1}"))
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∫–æ—Å—Ç—è–º", callback_data="back_to_rarities")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    card_text = (
        f"üé¥ **{original_card['name']}**\n"
        f"{original_card['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {original_card['rarity']}\n"
        f"‚≠ê **–û—á–∫–∏:** {original_card['points']}\n"
        f"üìÖ **–ü–æ–ª—É—á–µ–Ω–∞:** {card['acquired'][:10]}\n"
        f"üî¢ **–ü–æ–∑–∏—Ü–∏—è:** {index + 1}/{len(rarity_cards)}"
    )
    
    try:
        with open(original_card['image'], 'rb') as photo:
            await query.edit_message_media(
                media=InputMediaPhoto(media=photo, caption=card_text, parse_mode='Markdown'),
                reply_markup=reply_markup
            )
    except FileNotFoundError:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n{card_text}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def handle_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data == "back_to_rarities":
        await show_inventory_from_callback(query, context)
        return
    
    if data.startswith("nav_"):
        parts = data.split('_')
        if len(parts) >= 3:
            rarity = parts[1]
            index = int(parts[2])
            await show_card_navigation(query, context, rarity, index)

async def show_craft_menu_from_callback(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫—Ä–∞—Ñ—Ç–∞ –∏–∑ callback"""
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id]["inventory"]:
        await query.edit_message_text("üì≠ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞! –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏.")
        return
    
    keyboard = []
    for recipe_name, recipe in CRAFT_RECIPES.items():
        can_craft = True
        for ingredient in recipe["ingredients"]:
            user_cards = [card for card in user_data[user_id]["inventory"] if card["rarity"] == ingredient["rarity"]]
            if len(user_cards) < ingredient["count"]:
                can_craft = False
                break
        
        button_text = f"{recipe['description']}"
        if not can_craft:
            button_text += " ‚ùå"
        else:
            button_text += " ‚úÖ"
        
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"craft_{recipe_name}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="craft_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üõ†Ô∏è **–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –∫—Ä–∞—Ñ—Ç–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏:\n"
        "‚úÖ - –º–æ–∂–Ω–æ —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å\n"
        "‚ùå - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç\n\n"
        "–®–∞–Ω—Å—ã —É—Å–ø–µ—Ö–∞ —É–∫–∞–∑–∞–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_minigames_from_callback(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏-–∏–≥—Ä—ã –∏–∑ callback"""
    keyboard = [
        [InlineKeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∞", callback_data="minigame_roulette")],
        [InlineKeyboardButton("üéØ –£–≥–∞–¥–∞–π —Ä–µ–¥–∫–æ—Å—Ç—å", callback_data="minigame_guess")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="minigame_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üéÆ **–ú–∏–Ω–∏-–∏–≥—Ä—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:\n"
        "‚Ä¢ üé∞ **–†—É–ª–µ—Ç–∫–∞** - —Ä–∏—Å–∫–Ω–∏—Ç–µ –∫–∞—Ä—Ç–æ–π –¥–ª—è —à–∞–Ω—Å–∞ –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à—É—é\n"
        "‚Ä¢ üéØ **–£–≥–∞–¥–∞–π —Ä–µ–¥–∫–æ—Å—Ç—å** - —É–≥–∞–¥–∞–π—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è –æ—á–∫–æ–≤\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def start_trade_from_callback(query, context):
    """–ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω –∏–∑ callback"""
    await query.edit_message_text(
        "ü§ù **–û–±–º–µ–Ω –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏**\n\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
        "/trade @username card_id1,card_id2...\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/trade @username 2.1,2.2,2.3\n\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID –∫–∞—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /inventory"
    )

async def show_profile_from_callback(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ callback"""
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    user_info = user_data[user_id]
    profile_data = user_info.get("profile_data", {"title": "–ù–æ–≤–∏—á–æ–∫", "frame": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "bio": ""})
    
    total_cards = len(user_info["inventory"])
    total_points = user_info["total_points"]
    daily_streak = user_info.get("daily_streak", 0)
    
    rarity_count = {}
    for card in user_info["inventory"]:
        rarity = card["rarity"]
        rarity_count[rarity] = rarity_count.get(rarity, 0) + 1
    
    title = profile_data.get("title", "–ù–æ–≤–∏—á–æ–∫")
    frame = profile_data.get("frame", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è")
    bio = profile_data.get("bio", "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")
    
    title_emoji = PROFILE_TITLES.get(title, {}).get("emoji", "üë§")
    frame_color = PROFILE_FRAMES.get(frame, {}).get("color", "‚ö™")
    
    profile_text = (
        f"{frame_color}‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
        f"{frame_color}‚îÉ      **–ü–†–û–§–ò–õ–¨**      ‚îÉ\n"
        f"{frame_color}‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´\n"
        f"{frame_color}‚îÉ {title_emoji} **{title}**\n"
        f"{frame_color}‚îÉ üí¨ {bio}\n"
        f"{frame_color}‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´\n"
        f"{frame_color}‚îÉ üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"{frame_color}‚îÉ üìö –ö–∞—Ä—Ç–æ—á–µ–∫: {total_cards}\n"
        f"{frame_color}‚îÉ ‚≠ê –û—á–∫–æ–≤: {total_points}\n"
        f"{frame_color}‚îÉ üî• –°–µ—Ä–∏—è: {daily_streak} –¥–Ω–µ–π\n"
        f"{frame_color}‚î£‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î´\n"
        f"{frame_color}‚îÉ üé¥ **–ö–æ–ª–ª–µ–∫—Ü–∏—è:**\n"
    )
    
    for rarity in RARITY_GROUPS:
        if rarity in rarity_count:
            emoji = RARITY_GROUPS[rarity]["emoji"]
            profile_text += f"{frame_color}‚îÉ {emoji} {rarity}: {rarity_count[rarity]}\n"
    
    for event_config in EVENTS_CONFIG.values():
        event_key = event_config["key"]
        if event_key in rarity_count:
            emoji = event_config["emoji"]
            profile_text += f"{frame_color}‚îÉ {emoji} {event_key}: {rarity_count[event_key]}\n"
    
    profile_text += f"{frame_color}‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ", callback_data="profile_edit_bio")],
        [InlineKeyboardButton("üéñÔ∏è –í—ã–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª", callback_data="profile_select_title")],
        [InlineKeyboardButton("üñºÔ∏è –í—ã–±—Ä–∞—Ç—å —Ä–∞–º–∫—É", callback_data="profile_select_frame")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="profile_close")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(profile_text, reply_markup=reply_markup, parse_mode='Markdown')

async def daily_reward_from_callback(query, context):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∏–∑ callback"""
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data:
        user_data[user_id] = {
            "inventory": [], 
            "total_points": 0, 
            "last_used": None, 
            "used_promocodes": [],
            "daily_streak": 0,
            "last_daily": None,
            "profile_data": {"title": "–ù–æ–≤–∏—á–æ–∫", "frame": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "bio": ""}
        }
    
    now = datetime.now(timezone.utc)
    last_daily = user_data[user_id].get("last_daily")
    
    if last_daily:
        last_daily_date = datetime.fromisoformat(last_daily.replace('Z', '+00:00'))
        if last_daily_date.tzinfo is None:
            last_daily_date = last_daily_date.replace(tzinfo=timezone.utc)
        
        time_since_last_daily = now - last_daily_date
        if time_since_last_daily < timedelta(hours=20):
            next_daily = last_daily_date + timedelta(hours=20)
            time_left = next_daily - now
            
            hours = int(time_left.total_seconds() // 3600)
            minutes = int((time_left.total_seconds() % 3600) // 60)
            
            await query.edit_message_text(
                f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º\n"
                f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user_data[user_id].get('daily_streak', 0)} –¥–Ω–µ–π"
            )
            return
        
        if time_since_last_daily > timedelta(hours=44):
            user_data[user_id]["daily_streak"] = 0
    
    user_data[user_id]["daily_streak"] = user_data[user_id].get("daily_streak", 0) + 1
    streak = user_data[user_id]["daily_streak"]
    
    day = ((streak - 1) % 7) + 1
    reward_info = DAILY_REWARDS[day]
    
    reward_text = f"üéÅ **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ - –î–µ–Ω—å {day}**\n\n"
    reward_text += f"üìÖ –°–µ—Ä–∏—è: {streak} –¥–Ω–µ–π\n\n"
    
    if reward_info["type"] == "points":
        points = reward_info["amount"]
        user_data[user_id]["total_points"] += points
        reward_text += f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {points} –æ—á–∫–æ–≤!\n"
        reward_text += f"üìù {reward_info['description']}"
    
    elif reward_info["type"] == "random_card":
        rarity = reward_info["rarity"]
        card = get_random_card_by_rarity(rarity)
        if card:
            user_data[user_id]["inventory"].append({
                "card_id": card["id"],
                "name": card["name"],
                "rarity": card["rarity"],
                "points": card["points"],
                "acquired": datetime.now(timezone.utc).isoformat(),
                "from_daily": True
            })
            user_data[user_id]["total_points"] += card["points"]
            
            reward_text += f"üé¥ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {card['name']}\n"
            reward_text += f"{card['emoji']} –†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}\n"
            reward_text += f"‚≠ê –û—á–∫–∏: {card['points']}\n"
            reward_text += f"üìù {reward_info['description']}"
            
            try:
                with open(card['image'], 'rb') as photo:
                    await query.message.reply_photo(photo=photo, caption=reward_text, parse_mode='Markdown')
            except FileNotFoundError:
                await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n{reward_text}", parse_mode='Markdown')
        else:
            reward_text += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã!"
            await query.edit_message_text(reward_text, parse_mode='Markdown')
    
    elif reward_info["type"] == "special":
        card = get_random_card_by_rarity("–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è")
        if card:
            user_data[user_id]["inventory"].append({
                "card_id": card["id"],
                "name": card["name"],
                "rarity": card["rarity"],
                "points": card["points"],
                "acquired": datetime.now(timezone.utc).isoformat(),
                "from_daily": True
            })
            user_data[user_id]["total_points"] += card["points"]
            
            reward_text += f"üéâ **–°–£–ü–ï–† –ü–†–ò–ó!** üéâ\n\n"
            reward_text += f"üé¥ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {card['name']}\n"
            reward_text += f"{card['emoji']} –†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}\n"
            reward_text += f"‚≠ê –û—á–∫–∏: {card['points']}\n"
            reward_text += f"üìù {reward_info['description']}"
            
            try:
                with open(card['image'], 'rb') as photo:
                    await query.message.reply_photo(photo=photo, caption=reward_text, parse_mode='Markdown')
            except FileNotFoundError:
                await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n{reward_text}", parse_mode='Markdown')
        else:
            reward_text += "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã!"
            await query.edit_message_text(reward_text, parse_mode='Markdown')
    
    user_data[user_id]["last_daily"] = now.isoformat()
    save_user_data(user_data)
    
    if reward_info["type"] != "random_card" and reward_info["type"] != "special":
        await query.edit_message_text(reward_text, parse_mode='Markdown')

async def show_event_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_event_active():
        event_key = get_current_event_key()
        event_cards_info = "üé¥ **–ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è:**\n"
        if event_key in EVENT_CARDS:
            for card in EVENT_CARDS[event_key]["cards"]:
                event_cards_info += f"‚Ä¢ {card['name']} ({card['points']} –æ—á–∫–æ–≤)\n"
        
        await update.message.reply_text(
            f"üéâ **–°–û–ë–´–¢–ò–ï: {EVENT_CONFIG['name']} {EVENT_CONFIG['emoji']}**\n\n"
            f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {EVENT_CONFIG['start_date']} - {EVENT_CONFIG['end_date']}\n"
            f"üé≤ **–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è:** {EVENT_CONFIG['chance']}%\n"
            f"‚≠ê **–û—Å–æ–±—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:** {len(EVENT_CARDS[event_key]['cards'])} —à—Ç.\n\n"
            f"{event_cards_info}\n"
            f"‚ö° **–£—Å–ø–µ–π –ø–æ–ª—É—á–∏—Ç—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è!**",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
            parse_mode='Markdown'
        )

async def show_rarities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    available_rarities = get_available_rarities()
    
    rarity_info = "üé≤ **–®–∞–Ω—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–µ–π:**\n"
    for rarity, data in available_rarities.items():
        emoji = data["emoji"]
        chance = data["chance"]
        card_count = len(data["cards"])
        rarity_info += f"{emoji} {rarity}: {chance}% ({card_count} –∫–∞—Ä—Ç–æ—á–µ–∫)\n"
    
    if is_event_active():
        rarity_info += f"\nüéâ **–°–æ–±—ã—Ç–∏–µ {EVENT_CONFIG['name']} –∞–∫—Ç–∏–≤–Ω–æ –¥–æ {EVENT_CONFIG['end_date']}**"
    
    await update.message.reply_text(rarity_info, parse_mode='Markdown')

async def use_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text(
            "üéüÔ∏è **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:**\n"
            "–í–≤–µ–¥–∏—Ç–µ /promo <–∫–æ–¥>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /promo secret23gifting"
        )
        return
    
    promo_code = context.args[0].lower()
    promo_data = load_promo_data()
    user_data = load_user_data()
    
    if user_id not in user_data:
        user_data[user_id] = {
            "inventory": [], 
            "total_points": 0, 
            "last_used": None, 
            "used_promocodes": [],
            "daily_streak": 0,
            "last_daily": None,
            "profile_data": {"title": "–ù–æ–≤–∏—á–æ–∫", "frame": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "bio": ""}
        }
    
    if "used_promocodes" not in user_data[user_id]:
        user_data[user_id]["used_promocodes"] = []
    
    if has_user_used_promo(user_id, promo_code):
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
        return
    
    if promo_code not in promo_data:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!")
        return
    
    promo = promo_data[promo_code]
    
    if promo["uses_left"] <= 0:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!")
        return
    
    if promo["type"] == "random_rarity":
        card = get_random_card_by_rarity(promo["rarity"])
        if not card:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã!")
            return
    elif promo["type"] == "specific_card":
        card = get_card_by_id(promo["card_id"])
        if not card:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã!")
            return
    elif promo["type"] == "random_event":
        card = get_random_event_card(promo["event"])
        if not card:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã —Å–æ–±—ã—Ç–∏—è!")
            return
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞!")
        return
    
    event_notice = ""
    if promo["type"] == "random_event":
        event_notice = f"\nüéâ **–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–ê–Ø –ö–ê–†–¢–û–ß–ö–ê –°–û–ë–´–¢–ò–Ø {promo['event']}!**"
    
    caption = (
        f"üéÅ **–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!**\n"
        f"üé¥ **–ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:** {card['name']}\n"
        f"{card['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {card['rarity']}\n"
        f"‚≠ê **–û—á–∫–∏:** {card['points']}\n"
        f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}"
        f"{event_notice}"
    )
    
    try:
        with open(card['image'], 'rb') as photo:
            await update.message.reply_photo(photo=photo, caption=caption, parse_mode='Markdown')
    except FileNotFoundError:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {card['image']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    promo_data[promo_code]["uses_left"] -= 1
    save_promo_data(promo_data)
    
    mark_promo_used(user_id, promo_code)
    
    add_card_to_user(user_id, card)
    
    uses_left = promo_data[promo_code]["uses_left"]
    if uses_left > 0:
        uses_info = f"–û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses_left}/{promo['max_uses']}"
    else:
        uses_info = "–ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!"
    
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n{uses_info}")

async def get_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()

    last_used = user_data.get(user_id, {}).get('last_used')
    if last_used:
        if last_used.endswith('Z'):
            last_time = datetime.fromisoformat(last_used.replace('Z', '+00:00'))
        else:
            last_time = datetime.fromisoformat(last_used)
        
        current_time = datetime.now(timezone.utc)
        
        if last_time.tzinfo is None:
            last_time = last_time.replace(tzinfo=timezone.utc)
        
        time_passed = current_time - last_time
        cooldown_duration = timedelta(minutes=COOLDOWN_MINUTES)
        
        if time_passed < cooldown_duration:
            remaining_time = cooldown_duration - time_passed
            total_seconds = int(remaining_time.total_seconds())
            
            hours = total_seconds // 3600
            minutes = (total_seconds % 3600) // 60
            seconds = total_seconds % 60
            
            if hours > 0:
                time_message = f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
            elif minutes > 0:
                time_message = f"{minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
            else:
                time_message = f"{seconds} —Å–µ–∫—É–Ω–¥"
                
            await update.message.reply_text(
                f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {time_message}"
            )
            return

    card = get_random_card()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–±—ã—Ç–∏—è
    event_notice = ""
    if is_event_active() and card["rarity"] == get_current_event_key():
        event_notice = f"\nüéâ **–≠–ö–°–ö–õ–Æ–ó–ò–í–ù–ê–Ø –ö–ê–†–¢–û–ß–ö–ê –°–û–ë–´–¢–ò–Ø {EVENT_CONFIG['name']}!**"
    
    caption = (
        f"üé¥ **–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É:** {card['name']}\n"
        f"{card['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {card['rarity']}\n"
        f"‚≠ê **–û—á–∫–∏:** {card['points']}\n"
        f"üé≤ –®–∞–Ω—Å —Ä–µ–¥–∫–æ—Å—Ç–∏: {card['rarity_chance']}%"
        f"{event_notice}"
    )

    try:
        with open(card['image'], 'rb') as photo:
            await update.message.reply_photo(photo=photo, caption=caption, parse_mode='Markdown')
    except FileNotFoundError:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {card['image']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if user_id not in user_data:
        user_data[user_id] = {
            "inventory": [], 
            "total_points": 0, 
            "last_used": None, 
            "used_promocodes": [],
            "daily_streak": 0,
            "last_daily": None,
            "profile_data": {"title": "–ù–æ–≤–∏—á–æ–∫", "frame": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "bio": ""}
        }
    
    user_data[user_id]["inventory"].append({
        "card_id": card["id"],
        "name": card["name"],
        "rarity": card["rarity"],
        "points": card["points"],
        "acquired": datetime.now(timezone.utc).isoformat()
    })
    
    user_data[user_id]["total_points"] += card["points"]
    user_data[user_id]['last_used'] = datetime.now(timezone.utc).isoformat()
    save_user_data(user_data)
    
    logger.info(f"User {user_id} received card: {card['name']} (rarity: {card['rarity']})")

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    for rarity, data in RARITY_GROUPS.items():
        for card in data["cards"]:
            if not os.path.exists(card['image']):
                logger.warning(f"Image not found: {card['image']}")
    
    for event_key, event_data in EVENT_CARDS.items():
        for card in event_data["cards"]:
            if not os.path.exists(card['image']):
                logger.warning(f"Event image not found: {card['image']}")
    
    total_base_chance = sum(data["base_chance"] for data in RARITY_GROUPS.values())
    if abs(total_base_chance - 100.0) > 0.1:
        logger.warning(f"Total base chance is {total_base_chance}% (should be 100%)")
    else:
        logger.info(f"Total base chance: {total_base_chance}% (correct)")

    if is_event_active():
        logger.info(f"–°–æ–±—ã—Ç–∏–µ '{EVENT_CONFIG['name']}' –∞–∫—Ç–∏–≤–Ω–æ!")
    else:
        logger.info("–°–æ–±—ã—Ç–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")

    load_promo_data()

    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("getcard", get_card))
    application.add_handler(CommandHandler("inventory", show_inventory))
    application.add_handler(CommandHandler("rarities", show_rarities))
    application.add_handler(CommandHandler("promo", use_promo))
    application.add_handler(CommandHandler("event", show_event_info))
    
    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("craft", show_craft_menu))
    application.add_handler(CommandHandler("daily", daily_reward))
    application.add_handler(CommandHandler("trade", start_trade))
    application.add_handler(CommandHandler("minigames", show_minigames))
    application.add_handler(CommandHandler("profile", show_profile))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤
    application.add_handler(CallbackQueryHandler(handle_main_callback, pattern="^get_card_main|inventory_main|craft_main|minigames_main|trade_main|profile_main|daily_main$"))
    application.add_handler(CallbackQueryHandler(show_rarity_cards, pattern="^rarity_"))
    application.add_handler(CallbackQueryHandler(handle_navigation, pattern="^nav_"))
    application.add_handler(CallbackQueryHandler(show_inventory_from_callback, pattern="^back_to_rarities$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫—Ä–∞—Ñ—Ç–∞
    application.add_handler(CallbackQueryHandler(handle_craft_callback, pattern="^craft_"))
    application.add_handler(CallbackQueryHandler(handle_craft_callback, pattern="^craft_back"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±–º–µ–Ω–∞
    application.add_handler(CallbackQueryHandler(handle_trade_callback, pattern="^trade_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∏–Ω–∏-–∏–≥—Ä
    application.add_handler(CallbackQueryHandler(handle_minigame_callback, pattern="^minigame_"))
    application.add_handler(CallbackQueryHandler(handle_roulette_callback, pattern="^roulette_"))
    application.add_handler(CallbackQueryHandler(handle_guess_callback, pattern="^guess_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    application.add_handler(CallbackQueryHandler(handle_profile_callback, pattern="^profile_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –±–∏–æ)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bio_input))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway...")
    application.run_polling()
