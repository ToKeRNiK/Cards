import os
import json
import random
import logging
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8295319122:AAFGvZ1GFqPv8EkCTQnXjSKzd4dOG8rz1bg')
COOLDOWN_MINUTES = 15

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
RARITY_GROUPS = {
    "–†–µ–¥–∫–∞—è": {
        "chance": 30,
        "emoji": "üü¢",
        "cards": [
            {"id": 2.1, "name": "–î–≤–∞ –∑–∞–¥—Ä–æ—Ç–∞", "image": "cards/Rare/card2.1.jpg", "points": 50},
            {"id": 2.2, "name": "–£–º–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ –æ—á–∫–∞—Ö —Å–∫–∞—á–∞—Ç—å –æ–±–æ–∏", "image": "cards/Rare/card2.2.jpg", "points": 50},
            {"id": 2.3, "name": "–ö–æ—Å—Ç—è –í–æ–¥–æ–ª–∞–∑", "image": "cards/Rare/card2.3.jpg", "points": 50},
            {"id": 2.4, "name": "–ú–∏—Ö–∞–∏–ª –î–∏–Ω–æ–∑–∞–≤—Ä", "image": "cards/Rare/card2.4.jpg", "points": 50},
            {"id": 2.5, "name": "–ú–∏—Ö–∞–∏–ª –ú–µ–≤–¥–µ–¥", "image": "cards/Rare/card2.5.jpg", "points": 50},
            {"id": 2.6, "name": "–ë—É—Ä–≥–µ—Ä –ö–∏–Ω–≥", "image": "cards/Rare/card2.6.jpg", "points": 50},
            {"id": 2.7, "name": "–°–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "image": "cards/Rare/card2.7.jpg", "points": 50},
            {"id": 2.8, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä –æ–ø—è—Ç—å –Ω—é—Ö–∞–µ—Ç", "image": "cards/Rare/card2.8.jpg", "points": 50},
            {"id": 2.9, "name": "–ö–æ—Å—Ç—è", "image": "cards/Rare/card2.9.jpg", "points": 50},
        ]
    },
    "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è": {
        "chance": 23,
        "emoji": "üîµ",
        "cards": [
            {"id": 3, "name": "–Ø—Ä–∏–∫", "image": "cards/SuperRare/card3.jpg", "points": 200},
            {"id": 3.1, "name": "–£–í–ó", "image": "cards/SuperRare/card3.1.jpg", "points": 200},
            {"id": 3.2, "name": "–ß–∏–∂–∏–∫", "image": "cards/SuperRare/card3.2.jpg", "points": 200},
            {"id": 3.3, "name": "–§–∏–∫—Å –≤ –ü—Ä–∞–π–º–µ", "image": "cards/SuperRare/card3.3.jpg", "points": 200},
            {"id": 3.4, "name": "–ì–æ—à–∞", "image": "cards/SuperRare/card3.4.jpg", "points": 200},
            {"id": 3.5, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä —É –∑–µ—Ä–∫–∞–ª–∞", "image": "cards/SuperRare/card3.5.jpg", "points": 200},
            {"id": 3.6, "name": "–ú–æ–ª–æ—á–Ω–∞—è –∫—Ä–µ–º–∫–∞", "image": "cards/SuperRare/card3.6.jpg", "points": 200},
            {"id": 3.7, "name": "–ö–ª—É–±–Ω–∏—á–Ω–∞—è –∫—Ä–µ–º–∫–∞", "image": "cards/SuperRare/card3.7.jpg", "points": 200},
        ]
    },
    "–≠–ø–∏—á–µ—Å–∫–∞—è": {
        "chance": 17,
        "emoji": "üü£",
        "cards": [
            {"id": 4, "name": "–ú–∏—Ö–∞–∏–ª –î–∏–Ω–æ–∑–∞–≤—Ä", "image": "cards/Epic/card4.jpg", "points": 1000},
            {"id": 4.1, "name": "–°—Ç—ë–ø–∞ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç", "image": "cards/Epic/card4.1.jpg", "points": 1000},
            {"id": 4.2, "name": "–ö–∏–º–º–∏—Ö mentality", "image": "cards/Epic/card4.2.jpg", "points": 1000},
            {"id": 4.3, "name": "–í–µ—Å—ë–ª—ã–π –ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥—å", "image": "cards/Epic/card4.3.jpg", "points": 1000},
            {"id": 4.4, "name": "–ì—Ä—É—Å—Ç–Ω—ã–π –¢–∏–º–æ—Ñ–µ–π", "image": "cards/Epic/card4.4.jpg", "points": 1000},
            {"id": 4.5, "name": "–í—ë—Å–µ–ª—ã–π –¢–∏–º–æ—Ñ–µ–π", "image": "cards/Epic/card4.5.jpg", "points": 1000},
            {"id": 4.6, "name": "–ú–∏—Ä–æ—Å–ª–∞–≤ –∏ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∏–µ –∫–∞–±–∞–Ω—ã", "image": "cards/Epic/card4.6.jpg", "points": 1000},
            {"id": 4.7, "name": "–ö—Ä–µ–º–∫–∞ —Å –º–æ—Ä—Å–∫–æ–π —Å–æ–ª—å—é", "image": "cards/Epic/card4.7.jpg", "points": 1000},
            {"id": 4.8, "name": "–í–∫—É—Å–Ω–æ –∏ —Ç–æ—á–∫–∞", "image": "cards/Epic/card4.8.jpg", "points": 1000},
        ]
    },
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": {
        "chance": 15,
        "emoji": "üî¥",
        "cards": [
            {"id": 5, "name": "–°–∏–≥–º–∞ –ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥—å", "image": "cards/Mythic/card5.jpg", "points": 5000},
            {"id": 5.1, "name": "–ì—Ä–∏—à–∞ –®–∞–ª—É–Ω", "image": "cards/Mythic/card5.1.jpg", "points": 5000},
            {"id": 5.2, "name": "–ï–í–†–ê–ó", "image": "cards/Mythic/card5.2.jpg", "points": 5000},
            {"id": 5.3, "name": "–°—á–∞—Å—Ç–ª–∏–≤—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä", "image": "cards/Mythic/card5.3.jpg", "points": 5000},
            {"id": 5.4, "name": "–ú–∏—Ö–∞–∏–ª –ß–∏–∫–∞—Ç–∏–ª–æ", "image": "cards/Mythic/card5.4.jpg", "points": 5000},
            {"id": 5.5, "name": "–ú–∏—à–∞ Combination 2", "image": "cards/Mythic/card5.5.jpg", "points": 5000},
            {"id": 5.6, "name": "–í–∞–Ω—è –ú–∞–∫–∞–∫–∞", "image": "cards/Mythic/card5.6.jpg", "points": 5000},
            {"id": 5.7, "name": "–ú–∏—Ä–æ—Å–ª–∞–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–æ–º", "image": "cards/Mythic/card5.7.jpg", "points": 5000},
            {"id": 5.8, "name": "–ö–æ—Ñ–µ–π–Ω–∞—è –∫—Ä–µ–º–∫–∞", "image": "cards/Mythic/card5.8.jpg", "points": 5000},
        ]
    },
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": {
        "chance": 10,
        "emoji": "üü°",
        "cards": [
            {"id": 6, "name": "–°—Ç—ë–ø–∞ —Å —Ñ–∞–Ω–∞—Ç–∞–º–∏", "image": "cards/Legendary/card6.jpg", "points": 10000},
            {"id": 6.1, "name": "–¢–∏–º–æ—Ñ–µ–π –∏ –í–∞–Ω—è", "image": "cards/Legendary/card6.1.jpg", "points": 10000},
            {"id": 6.2, "name": "–ú–∏—Ö–∞–∏–ª –ú–µ–≤–¥–µ–¥—å –ø–æ—Å–ª–µ —Å–æ—Ä–µ–≤", "image": "cards/Legendary/card6.2.jpg", "points": 10000},
            {"id": 6.3, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å —Ü–≤–µ—Ç–æ—á–∫–æ–º", "image": "cards/Legendary/card6.3.jpg", "points": 10000},
            {"id": 6.4, "name": "–ë—É–ª—å–±–∞ –ú–µ–Ω", "image": "cards/Legendary/card6.4.jpg", "points": 10000},
            {"id": 6.5, "name": "–ë–µ–ª–æ—Ö", "image": "cards/Legendary/card6.5.jpg", "points": 10000},
            {"id": 6.6, "name": "–ú–∏—à–∞ Combination", "image": "cards/Legendary/card6.6.jpg", "points": 10000},
            {"id": 6.7, "name": "–ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥ –Ω–∞ —Å–æ—Ä–µ–≤–∞—Ö", "image": "cards/Legendary/card6.7.jpg", "points": 10000},
        ]
    },
    "–°–µ–∫—Ä–µ—Ç–Ω–∞—è": {
        "chance": 4,
        "emoji": "‚ö´Ô∏è",
        "cards": [
            {"id": 7, "name": "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?", "image": "cards/Secret/card7.jpg", "points": 20000},
            {"id": 7.1, "name": "–î–µ—Ä–∂–∞—Ç–µ–ª—å —è–∏—Ü –Ø—Ä–∏–∫", "image": "cards/Secret/card7.1.jpg", "points": 20000},
            {"id": 7.2, "name": "–ö–µ—Ñ–∞—Å", "image": "cards/Secret/card7.2.jpg", "points": 20000},
            {"id": 7.3, "name": "–í–ª–∞–¥–µ–ª–µ—Ü –ö–µ—Ñ–∞—Å–∞", "image": "cards/Secret/card7.3.jpg", "points": 20000},
            {"id": 7.4, "name": "–°—Ç—ë–ø–∞ –∂—É—ë—Ç —à–∞–ø–æ—á–∫—É", "image": "cards/Secret/card7.4.jpg", "points": 20000},
            {"id": 7.5, "name": "–í–ª–∞–¥–µ–ª–µ—Ü –ë—É—Ä–≥–µ—Ä –ö–∏–Ω–≥–∞", "image": "cards/Secret/card7.5.jpg", "points": 20000},
            {"id": 7.6, "name": "–ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥—å –∫—É–ø–∏–ª –ù–∏–≥–µ—Ä–∏—é", "image": "cards/Secret/card7.6.jpg", "points": 20000},
            {"id": 7.7, "name": "twenty-seven", "image": "cards/Secret/card7.7.jpg", "points": 20000},
        ]
    },
    "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è": {
        "chance": 1,
        "emoji": "üü†",
        "cards": [
            {"id": 8, "name": "–ú–∏—à–∏ –≤ –ø–æ–µ–∑–¥–µ", "image": "cards/Exclusive/card8.jpg", "points": 50000},
            {"id": 8.1, "name": "–ú–∏—à–∏ –≤ –¢—É–∞–ø—Å–µ", "image": "cards/Exclusive/card8.1.jpg", "points": 50000},
        ]
    },
}

# –ü—Ä–æ–º–æ–∫–æ–¥—ã
PROMOCODES = {
    "secret23gifting": {
        "type": "random_rarity",
        "rarity": "–°–µ–∫—Ä–µ—Ç–Ω–∞—è",
        "uses_left": 1,
        "max_uses": 1,
        "description": "–°–ª—É—á–∞–π–Ω–∞—è —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"
    },
    "legendary24gifting": {
        "type": "random_rarity", 
        "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
        "uses_left": 1,
        "max_uses": 1,
        "description": "–°–ª—É—á–∞–π–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞"
    },
    "yarikgivt2025": {
        "type": "specific_card",
        "card_id": 7.1,
        "uses_left": 1,
        "max_uses": 1,
        "description": "–î–µ—Ä–∂–∞—Ç–µ–ª—å —è–∏—Ü –Ø—Ä–∏–∫"
    },
    "halakefasiche4327": {
        "type": "specific_card",
        "card_id": 7.2,
        "uses_left": 3,
        "max_uses": 3,
        "description": "–ö–µ—Ñ–∞—Å"
    },
    "stem27onixfree": {
        "type": "specific_card", 
        "card_id": 7.7,
        "uses_left": 5,
        "max_uses": 5,
        "description": "twenty-seven"
    }
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    try:
        with open('user_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.info("user_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª")
        return {}

def save_user_data(data):
    with open('user_data.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
def load_promo_data():
    try:
        with open('promo_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.info("promo_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
        save_promo_data(PROMOCODES)
        return PROMOCODES.copy()

def save_promo_data(data):
    with open('promo_data.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
def get_random_card():
    roll = random.random() * 100
    current = 0
    
    selected_rarity = None
    for rarity, data in RARITY_GROUPS.items():
        current += data["chance"]
        if roll <= current:
            selected_rarity = rarity
            break
    
    if selected_rarity is None:
        selected_rarity = list(RARITY_GROUPS.keys())[0]
    
    cards_in_rarity = RARITY_GROUPS[selected_rarity]["cards"]
    card = random.choice(cards_in_rarity)
    
    card["rarity"] = selected_rarity
    card["emoji"] = RARITY_GROUPS[selected_rarity]["emoji"]
    card["rarity_chance"] = RARITY_GROUPS[selected_rarity]["chance"]
    
    return card

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID
def get_card_by_id(card_id):
    for rarity_group in RARITY_GROUPS.values():
        for card in rarity_group["cards"]:
            if card["id"] == card_id:
                card["rarity"] = next(r for r, rg in RARITY_GROUPS.items() if card in rg["cards"])
                card["emoji"] = RARITY_GROUPS[card["rarity"]]["emoji"]
                return card
    return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
def get_random_card_by_rarity(target_rarity):
    if target_rarity not in RARITY_GROUPS:
        return None
    
    cards_in_rarity = RARITY_GROUPS[target_rarity]["cards"]
    card = random.choice(cards_in_rarity)
    
    card["rarity"] = target_rarity
    card["emoji"] = RARITY_GROUPS[target_rarity]["emoji"]
    card["rarity_chance"] = RARITY_GROUPS[target_rarity]["chance"]
    
    return card

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def add_card_to_user(user_id, card):
    user_data = load_user_data()
    
    if user_id not in user_data:
        user_data[user_id] = {"inventory": [], "total_points": 0, "used_promocodes": []}
    
    user_data[user_id]["inventory"].append({
        "card_id": card["id"],
        "name": card["name"],
        "rarity": card["rarity"],
        "points": card["points"],
        "acquired": datetime.now(timezone.utc).isoformat(),
        "from_promo": True  # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –∏–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    })
    
    user_data[user_id]["total_points"] += card["points"]
    save_user_data(user_data)
    
    logger.info(f"User {user_id} received card from promo: {card['name']}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_card_stats(user_id):
    user_data = load_user_data()
    if user_id not in user_data:
        return {}
    
    inventory = user_data[user_id]["inventory"]
    card_stats = {}
    
    for card in inventory:
        card_id = card["card_id"]
        if card_id not in card_stats:
            # –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            original_card = get_card_by_id(card_id)
            if original_card:
                card_stats[card_id] = {
                    "name": original_card["name"],
                    "image": original_card["image"],
                    "rarity": original_card["rarity"],
                    "points": original_card["points"],
                    "emoji": original_card["emoji"],
                    "count": 1,
                    "total_points": original_card["points"]
                }
        else:
            card_stats[card_id]["count"] += 1
            card_stats[card_id]["total_points"] += card["points"]
    
    return card_stats

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rarity_info = "üé≤ **–®–∞–Ω—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–µ–π:**\n"
    for rarity, data in RARITY_GROUPS.items():
        emoji = data["emoji"]
        chance = data["chance"]
        card_count = len(data["cards"])
        rarity_info += f"{emoji} {rarity}: {chance}% ({card_count} –∫–∞—Ä—Ç–æ—á–µ–∫)\n"
    
    await update.message.reply_text(
        "üé¥ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫!**\n\n"
        "üìñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/getcard - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "/inventory - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
        "/rarities - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–¥–∫–æ—Å—Ç—è—Ö\n"
        "/promo <–∫–æ–¥> - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n\n"
        f"‚è∞ **–ö—É–ª–¥–∞—É–Ω:** {COOLDOWN_MINUTES} –º–∏–Ω—É—Ç\n\n"
        f"{rarity_info}",
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /rarities
async def show_rarities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rarity_info = "üé≤ **–®–∞–Ω—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–µ–π:**\n"
    for rarity, data in RARITY_GROUPS.items():
        emoji = data["emoji"]
        chance = data["chance"]
        card_count = len(data["cards"])
        rarity_info += f"{emoji} {rarity}: {chance}% ({card_count} –∫–∞—Ä—Ç–æ—á–µ–∫)\n"
    
    await update.message.reply_text(rarity_info, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /getcard
async def get_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = load_user_data()

    last_used = user_data.get(user_id, {}).get('last_used')
    if last_used:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç datetime —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
        if last_used.endswith('Z'):
            last_time = datetime.fromisoformat(last_used.replace('Z', '+00:00'))
        else:
            last_time = datetime.fromisoformat(last_used)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
        current_time = datetime.now(timezone.utc)
        
        # –ï—Å–ª–∏ last_time –Ω–∞–∏–≤–Ω—ã–π (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã), —Å—á–∏—Ç–∞–µ–º –µ–≥–æ UTC
        if last_time.tzinfo is None:
            last_time = last_time.replace(tzinfo=timezone.utc)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
        time_passed = current_time - last_time
        cooldown_duration = timedelta(minutes=COOLDOWN_MINUTES)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –∫—É–ª–¥–∞—É–Ω
        if time_passed < cooldown_duration:
            remaining_time = cooldown_duration - time_passed
            total_seconds = int(remaining_time.total_seconds())
            
            hours = total_seconds // 3600
            minutes = (total_seconds % 3600) // 60
            seconds = total_seconds % 60
            
            if hours > 0:
                time_message = f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
            elif minutes > 0:
                time_message = f"{minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
            else:
                time_message = f"{seconds} —Å–µ–∫—É–Ω–¥"
                
            await update.message.reply_text(
                f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {time_message}"
            )
            return

    card = get_random_card()
    
    caption = (
        f"üé¥ **–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É:** {card['name']}\n"
        f"{card['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {card['rarity']}\n"
        f"‚≠ê **–û—á–∫–∏:** {card['points']}\n"
        f"üé≤ –®–∞–Ω—Å —Ä–µ–¥–∫–æ—Å—Ç–∏: {card['rarity_chance']}%"
    )

    try:
        with open(card['image'], 'rb') as photo:
            await update.message.reply_photo(photo=photo, caption=caption, parse_mode='Markdown')
    except FileNotFoundError:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {card['image']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if user_id not in user_data:
        user_data[user_id] = {"inventory": [], "total_points": 0, "used_promocodes": []}
    
    user_data[user_id]["inventory"].append({
        "card_id": card["id"],
        "name": card["name"],
        "rarity": card["rarity"],
        "points": card["points"],
        "acquired": datetime.now(timezone.utc).isoformat()
    })
    
    user_data[user_id]["total_points"] += card["points"]
    user_data[user_id]['last_used'] = datetime.now(timezone.utc).isoformat()
    save_user_data(user_data)
    
    logger.info(f"User {user_id} received card: {card['name']}")

# –ö–æ–º–∞–Ω–¥–∞ /inventory - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
async def show_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id]["inventory"]:
        await update.message.reply_text("üì≠ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getcard —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.")
        return
    
    inventory = user_data[user_id]["inventory"]
    total_points = user_data[user_id]["total_points"]
    
    # –°—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    rarity_count = {}
    for card in inventory:
        rarity = card["rarity"]
        rarity_count[rarity] = rarity_count.get(rarity, 0) + 1
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–¥–∫–æ—Å—Ç—è–º–∏
    keyboard = []
    for rarity in RARITY_GROUPS:
        if rarity in rarity_count and rarity_count[rarity] > 0:
            emoji = RARITY_GROUPS[rarity]["emoji"]
            count = rarity_count[rarity]
            keyboard.append([InlineKeyboardButton(f"{emoji} {rarity} ({count})", callback_data=f"rarity_{rarity}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    stats_text = (
        f"üìä **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:**\n"
        f"üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(inventory)}\n"
        f"‚≠ê –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {total_points}\n\n"
        f"üé≤ **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:**"
    )
    
    await update.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
async def show_rarity_cards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    rarity = query.data.replace("rarity_", "")
    
    card_stats = get_user_card_stats(user_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    rarity_cards = {card_id: stats for card_id, stats in card_stats.items() if stats["rarity"] == rarity}
    
    if not rarity_cards:
        await query.edit_message_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–¥–∫–æ—Å—Ç–∏: {rarity}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    context.user_data["current_rarity"] = rarity
    context.user_data["rarity_cards"] = list(rarity_cards.items())  # –°–ø–∏—Å–æ–∫ (card_id, stats)
    context.user_data["current_card_index"] = 0
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    await show_card_navigation(query, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
async def show_card_navigation(query, context):
    user_data = context.user_data
    rarity = user_data["current_rarity"]
    cards = user_data["rarity_cards"]
    current_index = user_data["current_card_index"]
    
    if current_index >= len(cards):
        current_index = 0
        user_data["current_card_index"] = 0
    
    card_id, card_stats = cards[current_index]
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    caption = (
        f"üé¥ **{card_stats['name']}**\n"
        f"{card_stats['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {card_stats['rarity']}\n"
        f"üì¶ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {card_stats['count']} —à—Ç.\n"
        f"‚≠ê **–û—á–∫–∏ –∑–∞ —à—Ç—É–∫—É:** {card_stats['points']}\n"
        f"üí∞ **–í—Å–µ–≥–æ –æ—á–∫–æ–≤:** {card_stats['total_points']}\n"
        f"üìÑ **–ö–∞—Ä—Ç–æ—á–∫–∞ {current_index + 1} –∏–∑ {len(cards)}**"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if len(cards) > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav_prev"))
        nav_buttons.append(InlineKeyboardButton(f"{current_index + 1}/{len(cards)}", callback_data="nav_info"))
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data="nav_next"))
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–¥–∫–æ—Å—Ç–∏
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∫–æ—Å—Ç—è–º", callback_data="back_to_rarities")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        with open(card_stats['image'], 'rb') as photo:
            if query.message.photo:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                await query.message.edit_media(
                    media=InputMediaPhoto(photo, caption=caption, parse_mode='Markdown'),
                    reply_markup=reply_markup
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.reply_photo(
                    photo=photo,
                    caption=caption,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
    except FileNotFoundError:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n\n{caption}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async def handle_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action = query.data
    user_data = context.user_data
    
    if "current_card_index" not in user_data or "rarity_cards" not in user_data:
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /inventory —Å–Ω–æ–≤–∞.")
        return
    
    current_index = user_data["current_card_index"]
    total_cards = len(user_data["rarity_cards"])
    
    if action == "nav_prev":
        user_data["current_card_index"] = (current_index - 1) % total_cards
    elif action == "nav_next":
        user_data["current_card_index"] = (current_index + 1) % total_cards
    elif action == "back_to_rarities":
        await show_inventory_from_callback(query, context)
        return
    
    await show_card_navigation(query, context)

# –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏–∑ callback
async def show_inventory_from_callback(query, context):
    user_id = str(query.from_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id]["inventory"]:
        await query.edit_message_text("üì≠ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getcard —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.")
        return
    
    inventory = user_data[user_id]["inventory"]
    total_points = user_data[user_id]["total_points"]
    
    # –°—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    rarity_count = {}
    for card in inventory:
        rarity = card["rarity"]
        rarity_count[rarity] = rarity_count.get(rarity, 0) + 1
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–¥–∫–æ—Å—Ç—è–º–∏
    keyboard = []
    for rarity in RARITY_GROUPS:
        if rarity in rarity_count and rarity_count[rarity] > 0:
            emoji = RARITY_GROUPS[rarity]["emoji"]
            count = rarity_count[rarity]
            keyboard.append([InlineKeyboardButton(f"{emoji} {rarity} ({count})", callback_data=f"rarity_{rarity}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    stats_text = (
        f"üìä **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:**\n"
        f"üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(inventory)}\n"
        f"‚≠ê –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {total_points}\n\n"
        f"üé≤ **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:**"
    )
    
    await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /promo
async def use_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text(
            "üéüÔ∏è **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:**\n"
            "–í–≤–µ–¥–∏—Ç–µ /promo <–∫–æ–¥>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /promo secret23gifting"
        )
        return
    
    promo_code = context.args[0].lower()
    promo_data = load_promo_data()
    user_data = load_user_data()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if user_id not in user_data:
        user_data[user_id] = {"inventory": [], "total_points": 0, "used_promocodes": []}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    if "used_promocodes" not in user_data[user_id]:
        user_data[user_id]["used_promocodes"] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    if promo_code in user_data[user_id]["used_promocodes"]:
        await update.message.reply_text("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if promo_code not in promo_data:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!")
        return
    
    promo = promo_data[promo_code]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    if promo["uses_left"] <= 0:
        await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω!")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if promo["type"] == "random_rarity":
        card = get_random_card_by_rarity(promo["rarity"])
        if not card:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã!")
            return
    elif promo["type"] == "specific_card":
        card = get_card_by_id(promo["card_id"])
        if not card:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã!")
            return
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    caption = (
        f"üéÅ **–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!**\n"
        f"üé¥ **–ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:** {card['name']}\n"
        f"{card['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {card['rarity']}\n"
        f"‚≠ê **–û—á–∫–∏:** {card['points']}\n"
        f"üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}"
    )
    
    try:
        with open(card['image'], 'rb') as photo:
            await update.message.reply_photo(photo=photo, caption=caption, parse_mode='Markdown')
    except FileNotFoundError:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {card['image']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    promo_data[promo_code]["uses_left"] -= 1
    save_promo_data(promo_data)
    
    user_data[user_id]["used_promocodes"].append(promo_code)
    add_card_to_user(user_id, card)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Å—Ç–∞—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    uses_left = promo_data[promo_code]["uses_left"]
    if uses_left > 0:
        uses_info = f"–û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {uses_left}/{promo['max_uses']}"
    else:
        uses_info = "–ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!"
    
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n{uses_info}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    for rarity, data in RARITY_GROUPS.items():
        for card in data["cards"]:
            if not os.path.exists(card['image']):
                logger.warning(f"Image not found: {card['image']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã —à–∞–Ω—Å–æ–≤
    total_chance = sum(data["chance"] for data in RARITY_GROUPS.values())
    if total_chance != 100:
        logger.warning(f"Total chance is {total_chance}% (should be 100%)")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_promo_data()

    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("getcard", get_card))
    application.add_handler(CommandHandler("inventory", show_inventory))
    application.add_handler(CommandHandler("rarities", show_rarities))
    application.add_handler(CommandHandler("promo", use_promo))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    application.add_handler(CallbackQueryHandler(show_rarity_cards, pattern="^rarity_"))
    application.add_handler(CallbackQueryHandler(handle_navigation, pattern="^nav_"))
    application.add_handler(CallbackQueryHandler(show_inventory_from_callback, pattern="^back_to_rarities$"))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway...")
    application.run_polling()
