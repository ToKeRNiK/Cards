import os
import json
import random
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8295319122:AAFGvZ1GFqPv8EkCTQnXjSKzd4dOG8rz1bg')
COOLDOWN_MINUTES = 15

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
RARITY_GROUPS = {
    "–û–±—ã—á–Ω–∞—è": {
        "chance": 39,
        "emoji": "‚ö™",
        "cards": [
            {"id": 1, "name": "–ë—É—Ä–≥–µ—Ä –ö–∏–Ω–≥", "image": "cards/Common/card1.jpg", "points": 10},
            {"id": 2, "name": "–°–ª—É–∂–µ–±–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "image": "cards/Common/card1.1.jpg", "points": 10},
            {"id": 3, "name": "–û–ø–µ—Ä–∞—Ç–æ—Ä –æ–ø—è—Ç—å –Ω—é—Ö–∞–µ—Ç", "image": "cards/Common/card1.2.jpg", "points": 10},
        ]
    },
    "–†–µ–¥–∫–∞—è": {
        "chance": 25,
        "emoji": "üü¢",
        "cards": [
            {"id": 4, "name": "–í–∫—É—Å–Ω–æ –∏ —Ç–æ—á–∫–∞", "image": "cards/Rare/card2.jpg", "points": 50},
            {"id": 5, "name": "–î–≤–∞ –∑–∞–¥—Ä–æ—Ç–∞", "image": "cards/Rare/card2.1.jpg", "points": 50},
        ]
    },
    "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∞—è": {
        "chance": 15,
        "emoji": "üîµ",
        "cards": [
            {"id": 7, "name": "–Ø—Ä–∏–∫", "image": "cards/SuperRare/card3.jpg", "points": 200},
            {"id": 8, "name": "–£–í–ó", "image": "cards/SuperRare/card3.1.jpg", "points": 200},
        ]
    },
    "–≠–ø–∏—á–µ—Å–∫–∞—è": {
        "chance": 10,
        "emoji": "üü£",
        "cards": [
            {"id": 10, "name": "–ú–∏—Ö–∞–∏–ª –î–∏–Ω–æ–∑–∞–≤—Ä", "image": "cards/Epic/card4.jpg", "points": 1000},
            {"id": 11, "name": "–°—Ç—ë–ø–∞ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏—Å—Ç", "image": "cards/Epic/card4.1.jpg", "points": 1000},
        ]
    },
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": {
        "chance": 7,
        "emoji": "üî¥",
        "cards": [
            {"id": 13, "name": "–°–∏–≥–º–∞ –ú–∏—Ö–∞–∏–ª –ú–µ–¥–≤–µ–¥—å", "image": "cards/Mythic/card5.jpg", "points": 5000},
            {"id": 14, "name": "–ì—Ä–∏—à–∞ –®–∞–ª—É–Ω", "image": "cards/Mythic/card5.1.jpg", "points": 5000},
            {"id": 15, "name": "–ï–í–†–ê–ó", "image": "cards/Mythic/card5.2.jpg", "points": 5000},
        ]
    },
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": {
        "chance": 3,
        "emoji": "üü°",
        "cards": [
            {"id": 16, "name": "–°—Ç—ë–ø–∞ —Å —Ñ–∞–Ω–∞—Ç–∞–º–∏", "image": "cards/Legendary/card6.jpg", "points": 10000},
        ]
    },
    "–°–µ–∫—Ä–µ—Ç–Ω–∞—è": {
        "chance": 1,
        "emoji": "‚ö´Ô∏è",
        "cards": [
            {"id": 17, "name": "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?", "image": "cards/Secret/card7.jpg", "points": 20000},
            {"id": 18, "name": "–î–µ—Ä–∂–∞—Ç–µ–ª—å —è–∏—Ü –Ø—Ä–∏–∫", "image": "cards/Secret/card7.1.jpg", "points": 30000},
        ]
    },
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    try:
        with open('user_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.info("user_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª")
        return {}

def save_user_data(data):
    with open('user_data.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
def get_random_card():
    roll = random.random() * 100
    current = 0
    
    selected_rarity = None
    for rarity, data in RARITY_GROUPS.items():
        current += data["chance"]
        if roll <= current:
            selected_rarity = rarity
            break
    
    if selected_rarity is None:
        selected_rarity = list(RARITY_GROUPS.keys())[0]
    
    cards_in_rarity = RARITY_GROUPS[selected_rarity]["cards"]
    card = random.choice(cards_in_rarity)
    
    card["rarity"] = selected_rarity
    card["emoji"] = RARITY_GROUPS[selected_rarity]["emoji"]
    card["rarity_chance"] = RARITY_GROUPS[selected_rarity]["chance"]
    
    return card

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rarity_info = "üé≤ **–®–∞–Ω—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–µ–π:**\n"
    for rarity, data in RARITY_GROUPS.items():
        emoji = data["emoji"]
        chance = data["chance"]
        card_count = len(data["cards"])
        rarity_info += f"{emoji} {rarity}: {chance}% ({card_count} –∫–∞—Ä—Ç–æ—á–µ–∫)\n"
    
    await update.message.reply_text(
        "üé¥ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫!**\n\n"
        "üìñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/getcard - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "/inventory - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
        "/rarities - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–¥–∫–æ—Å—Ç—è—Ö\n\n"
        f"‚è∞ **–ö—É–ª–¥–∞—É–Ω:** {COOLDOWN_MINUTES} –º–∏–Ω—É—Ç\n\n"
        f"{rarity_info}",
        parse_mode='Markdown'
    )

# –ö–æ–º–∞–Ω–¥–∞ /rarities
async def show_rarities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rarity_info = "üé≤ **–®–∞–Ω—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–µ–π:**\n"
    for rarity, data in RARITY_GROUPS.items():
        emoji = data["emoji"]
        chance = data["chance"]
        card_count = len(data["cards"])
        rarity_info += f"{emoji} {rarity}: {chance}% ({card_count} –∫–∞—Ä—Ç–æ—á–µ–∫)\n"
    
    await update.message.reply_text(rarity_info, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /getcard
async def get_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = load_user_data()

    last_used = user_data.get(user_id, {}).get('last_used')
    if last_used:
        last_time = datetime.fromisoformat(last_used)
        time_diff = datetime.now() - last_time
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
        if time_diff < timedelta(minutes=COOLDOWN_MINUTES):
            remaining_seconds = (timedelta(minutes=COOLDOWN_MINUTES) - time_diff).total_seconds()
            minutes = int(remaining_seconds // 60)
            seconds = int(remaining_seconds % 60)
            
            await update.message.reply_text(
                f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
            )
            return

    card = get_random_card()
    
    caption = (
        f"üé¥ **–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É:** {card['name']}\n"
        f"{card['emoji']} **–†–µ–¥–∫–æ—Å—Ç—å:** {card['rarity']}\n"
        f"‚≠ê **–û—á–∫–∏:** {card['points']}\n"
        f"üé≤ –®–∞–Ω—Å —Ä–µ–¥–∫–æ—Å—Ç–∏: {card['rarity_chance']}%"
    )

    try:
        with open(card['image'], 'rb') as photo:
            await update.message.reply_photo(photo=photo, caption=caption, parse_mode='Markdown')
    except FileNotFoundError:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {card['image']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if user_id not in user_data:
        user_data[user_id] = {"inventory": [], "total_points": 0}
    
    user_data[user_id]["inventory"].append({
        "card_id": card["id"],
        "name": card["name"],
        "rarity": card["rarity"],
        "points": card["points"],
        "acquired": datetime.now().isoformat()
    })
    
    user_data[user_id]["total_points"] += card["points"]
    user_data[user_id]['last_used'] = datetime.now().isoformat()
    save_user_data(user_data)
    
    logger.info(f"User {user_id} received card: {card['name']}")

# –ö–æ–º–∞–Ω–¥–∞ /inventory
async def show_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = load_user_data()
    
    if user_id not in user_data or not user_data[user_id]["inventory"]:
        await update.message.reply_text("üì≠ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /getcard —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É.")
        return
    
    inventory = user_data[user_id]["inventory"]
    total_points = user_data[user_id]["total_points"]
    
    rarity_count = {}
    for card in inventory:
        rarity = card["rarity"]
        rarity_count[rarity] = rarity_count.get(rarity, 0) + 1
    
    stats_text = f"üìä **–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è:**\n"
    stats_text += f"üìö –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(inventory)}\n"
    stats_text += f"‚≠ê –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {total_points}\n\n"
    
    stats_text += "üé≤ **–ü–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º:**\n"
    for rarity, count in rarity_count.items():
        emoji = RARITY_GROUPS[rarity]["emoji"]
        stats_text += f"{emoji} {rarity}: {count} —à—Ç.\n"
    
    stats_text += f"\nüÜï **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ:**\n"
    recent_cards = inventory[-5:]
    for card in recent_cards:
        emoji = RARITY_GROUPS[card["rarity"]]["emoji"]
        stats_text += f"{emoji} {card['name']} ({card['points']} –æ—á–∫–æ–≤)\n"
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    for rarity, data in RARITY_GROUPS.items():
        for card in data["cards"]:
            if not os.path.exists(card['image']):
                logger.warning(f"Image not found: {card['image']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã —à–∞–Ω—Å–æ–≤
    total_chance = sum(data["chance"] for data in RARITY_GROUPS.values())
    if total_chance != 100:
        logger.warning(f"Total chance is {total_chance}% (should be 100%)")

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("getcard", get_card))
    application.add_handler(CommandHandler("inventory", show_inventory))
    application.add_handler(CommandHandler("rarities", show_rarities))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway...")
    application.run_polling()
